// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_reader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_reader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LogReaderState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogReaderState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5freader_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_log_5freader_2eproto() {
  protobuf_AddDesc_log_5freader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_reader.proto");
  GOOGLE_CHECK(file != NULL);
  LogReaderState_descriptor_ = file->message_type(0);
  static const int LogReaderState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, success_),
  };
  LogReaderState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogReaderState_descriptor_,
      LogReaderState::default_instance_,
      LogReaderState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogReaderState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReaderState, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5freader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogReaderState_descriptor_, &LogReaderState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5freader_2eproto() {
  delete LogReaderState::default_instance_;
  delete LogReaderState_reflection_;
}

void protobuf_AddDesc_log_5freader_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_log_5freader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020log_reader.proto\"`\n\016LogReaderState\022\026\n\007"
    "started\030\001 \001(\010:\005false\022\017\n\007version\030\002 \001(\004\022\r\n"
    "\005entry\030\003 \001(\014\022\026\n\007success\030\004 \001(\010:\005false", 116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_reader.proto", &protobuf_RegisterTypes);
  LogReaderState::default_instance_ = new LogReaderState();
  LogReaderState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5freader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5freader_2eproto {
  StaticDescriptorInitializer_log_5freader_2eproto() {
    protobuf_AddDesc_log_5freader_2eproto();
  }
} static_descriptor_initializer_log_5freader_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogReaderState::kStartedFieldNumber;
const int LogReaderState::kVersionFieldNumber;
const int LogReaderState::kEntryFieldNumber;
const int LogReaderState::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogReaderState::LogReaderState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogReaderState)
}

void LogReaderState::InitAsDefaultInstance() {
}

LogReaderState::LogReaderState(const LogReaderState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogReaderState)
}

void LogReaderState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  started_ = false;
  version_ = GOOGLE_ULONGLONG(0);
  entry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogReaderState::~LogReaderState() {
  // @@protoc_insertion_point(destructor:LogReaderState)
  SharedDtor();
}

void LogReaderState::SharedDtor() {
  entry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogReaderState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogReaderState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogReaderState_descriptor_;
}

const LogReaderState& LogReaderState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5freader_2eproto();
  return *default_instance_;
}

LogReaderState* LogReaderState::default_instance_ = NULL;

LogReaderState* LogReaderState::New(::google::protobuf::Arena* arena) const {
  LogReaderState* n = new LogReaderState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogReaderState::Clear() {
// @@protoc_insertion_point(message_clear_start:LogReaderState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogReaderState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogReaderState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(started_, success_);
    version_ = GOOGLE_ULONGLONG(0);
    if (has_entry()) {
      entry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogReaderState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogReaderState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool started = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &started_)));
          set_has_started();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }

      // optional bytes entry = 3;
      case 3: {
        if (tag == 26) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogReaderState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogReaderState)
  return false;
#undef DO_
}

void LogReaderState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogReaderState)
  // optional bool started = 1 [default = false];
  if (has_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->started(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  // optional bytes entry = 3;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->entry(), output);
  }

  // optional bool success = 4 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogReaderState)
}

::google::protobuf::uint8* LogReaderState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogReaderState)
  // optional bool started = 1 [default = false];
  if (has_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->started(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  // optional bytes entry = 3;
  if (has_entry()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->entry(), target);
  }

  // optional bool success = 4 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogReaderState)
  return target;
}

int LogReaderState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LogReaderState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool started = 1 [default = false];
    if (has_started()) {
      total_size += 1 + 1;
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional bytes entry = 3;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entry());
    }

    // optional bool success = 4 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogReaderState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogReaderState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogReaderState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogReaderState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogReaderState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogReaderState)
    MergeFrom(*source);
  }
}

void LogReaderState::MergeFrom(const LogReaderState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogReaderState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_started()) {
      set_started(from.started());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_entry()) {
      set_has_entry();
      entry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_);
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogReaderState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogReaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogReaderState::CopyFrom(const LogReaderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogReaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReaderState::IsInitialized() const {

  return true;
}

void LogReaderState::Swap(LogReaderState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogReaderState::InternalSwap(LogReaderState* other) {
  std::swap(started_, other->started_);
  std::swap(version_, other->version_);
  entry_.Swap(&other->entry_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogReaderState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogReaderState_descriptor_;
  metadata.reflection = LogReaderState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogReaderState

// optional bool started = 1 [default = false];
bool LogReaderState::has_started() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogReaderState::set_has_started() {
  _has_bits_[0] |= 0x00000001u;
}
void LogReaderState::clear_has_started() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogReaderState::clear_started() {
  started_ = false;
  clear_has_started();
}
 bool LogReaderState::started() const {
  // @@protoc_insertion_point(field_get:LogReaderState.started)
  return started_;
}
 void LogReaderState::set_started(bool value) {
  set_has_started();
  started_ = value;
  // @@protoc_insertion_point(field_set:LogReaderState.started)
}

// optional uint64 version = 2;
bool LogReaderState::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogReaderState::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void LogReaderState::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogReaderState::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 LogReaderState::version() const {
  // @@protoc_insertion_point(field_get:LogReaderState.version)
  return version_;
}
 void LogReaderState::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:LogReaderState.version)
}

// optional bytes entry = 3;
bool LogReaderState::has_entry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogReaderState::set_has_entry() {
  _has_bits_[0] |= 0x00000004u;
}
void LogReaderState::clear_has_entry() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogReaderState::clear_entry() {
  entry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entry();
}
 const ::std::string& LogReaderState::entry() const {
  // @@protoc_insertion_point(field_get:LogReaderState.entry)
  return entry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogReaderState::set_entry(const ::std::string& value) {
  set_has_entry();
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogReaderState.entry)
}
 void LogReaderState::set_entry(const char* value) {
  set_has_entry();
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogReaderState.entry)
}
 void LogReaderState::set_entry(const void* value, size_t size) {
  set_has_entry();
  entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogReaderState.entry)
}
 ::std::string* LogReaderState::mutable_entry() {
  set_has_entry();
  // @@protoc_insertion_point(field_mutable:LogReaderState.entry)
  return entry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogReaderState::release_entry() {
  // @@protoc_insertion_point(field_release:LogReaderState.entry)
  clear_has_entry();
  return entry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogReaderState::set_allocated_entry(::std::string* entry) {
  if (entry != NULL) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
  entry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entry);
  // @@protoc_insertion_point(field_set_allocated:LogReaderState.entry)
}

// optional bool success = 4 [default = false];
bool LogReaderState::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogReaderState::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void LogReaderState::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogReaderState::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool LogReaderState::success() const {
  // @@protoc_insertion_point(field_get:LogReaderState.success)
  return success_;
}
 void LogReaderState::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:LogReaderState.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
