// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batch.proto

#ifndef PROTOBUF_batch_2eproto__INCLUDED
#define PROTOBUF_batch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_batch_2eproto();
void protobuf_AssignDesc_batch_2eproto();
void protobuf_ShutdownFile_batch_2eproto();

class Batch;

// ===================================================================

class Batch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Batch) */ {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Batch& default_instance();

  void Swap(Batch* other);

  // implements Message ----------------------------------------------

  inline Batch* New() const { return New(NULL); }

  Batch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Batch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::std::string& entries(int index) const;
  ::std::string* mutable_entries(int index);
  void set_entries(int index, const ::std::string& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const void* value, size_t size);
  ::std::string* add_entries();
  void add_entries(const ::std::string& value);
  void add_entries(const char* value);
  void add_entries(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& entries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_entries();

  // @@protoc_insertion_point(class_scope:Batch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> entries_;
  friend void  protobuf_AddDesc_batch_2eproto();
  friend void protobuf_AssignDesc_batch_2eproto();
  friend void protobuf_ShutdownFile_batch_2eproto();

  void InitAsDefaultInstance();
  static Batch* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Batch

// repeated bytes entries = 1;
inline int Batch::entries_size() const {
  return entries_.size();
}
inline void Batch::clear_entries() {
  entries_.Clear();
}
inline const ::std::string& Batch::entries(int index) const {
  // @@protoc_insertion_point(field_get:Batch.entries)
  return entries_.Get(index);
}
inline ::std::string* Batch::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Batch.entries)
  return entries_.Mutable(index);
}
inline void Batch::set_entries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Batch.entries)
  entries_.Mutable(index)->assign(value);
}
inline void Batch::set_entries(int index, const char* value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Batch.entries)
}
inline void Batch::set_entries(int index, const void* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Batch.entries)
}
inline ::std::string* Batch::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:Batch.entries)
  return entries_.Add();
}
inline void Batch::add_entries(const ::std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Batch.entries)
}
inline void Batch::add_entries(const char* value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Batch.entries)
}
inline void Batch::add_entries(const void* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Batch.entries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::entries() const {
  // @@protoc_insertion_point(field_list:Batch.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Batch.entries)
  return &entries_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_batch_2eproto__INCLUDED
