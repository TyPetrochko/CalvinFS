// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scalar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scalar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Scalar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scalar_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Scalar_ScalarType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EmptyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UInt64Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UInt64Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairSequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairSequence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_scalar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_scalar_2eproto() {
  protobuf_AddDesc_scalar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scalar.proto");
  GOOGLE_CHECK(file != NULL);
  Scalar_descriptor_ = file->message_type(0);
  static const int Scalar_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, int64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, uint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, uint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, string_value_),
  };
  Scalar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scalar_descriptor_,
      Scalar::default_instance_,
      Scalar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scalar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _internal_metadata_),
      -1);
  Scalar_ScalarType_descriptor_ = Scalar_descriptor_->enum_type(0);
  EmptyProto_descriptor_ = file->message_type(1);
  static const int EmptyProto_offsets_[1] = {
  };
  EmptyProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmptyProto_descriptor_,
      EmptyProto::default_instance_,
      EmptyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmptyProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyProto, _internal_metadata_),
      -1);
  UInt64Pair_descriptor_ = file->message_type(2);
  static const int UInt64Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, second_),
  };
  UInt64Pair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UInt64Pair_descriptor_,
      UInt64Pair::default_instance_,
      UInt64Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, _has_bits_[0]),
      -1,
      -1,
      sizeof(UInt64Pair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, _internal_metadata_),
      -1);
  PairSequence_descriptor_ = file->message_type(3);
  static const int PairSequence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairSequence, pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairSequence, misc_),
  };
  PairSequence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PairSequence_descriptor_,
      PairSequence::default_instance_,
      PairSequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairSequence, _has_bits_[0]),
      -1,
      -1,
      sizeof(PairSequence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairSequence, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scalar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scalar_descriptor_, &Scalar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyProto_descriptor_, &EmptyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UInt64Pair_descriptor_, &UInt64Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PairSequence_descriptor_, &PairSequence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scalar_2eproto() {
  delete Scalar::default_instance_;
  delete Scalar_reflection_;
  delete EmptyProto::default_instance_;
  delete EmptyProto_reflection_;
  delete UInt64Pair::default_instance_;
  delete UInt64Pair_reflection_;
  delete PairSequence::default_instance_;
  delete PairSequence_reflection_;
}

void protobuf_AddDesc_scalar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_scalar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014scalar.proto\"\316\002\n\006Scalar\022&\n\004type\030\001 \002(\0162"
    "\022.Scalar.ScalarType:\004UNIT\022\022\n\nbool_value\030"
    "\002 \001(\010\022\023\n\013int32_value\030\003 \001(\005\022\023\n\013int64_valu"
    "e\030\004 \001(\003\022\024\n\014uint32_value\030\005 \001(\r\022\024\n\014uint64_"
    "value\030\006 \001(\004\022\023\n\013float_value\030\007 \001(\002\022\024\n\014doub"
    "le_value\030\010 \001(\001\022\024\n\014string_value\030\t \001(\t\"q\n\n"
    "ScalarType\022\010\n\004UNIT\020\001\022\010\n\004BOOL\020\002\022\t\n\005INT32\020"
    "\003\022\t\n\005INT64\020\004\022\n\n\006UINT32\020\005\022\n\n\006UINT64\020\006\022\t\n\005"
    "FLOAT\020\007\022\n\n\006DOUBLE\020\010\022\n\n\006STRING\020\t\"\014\n\nEmpty"
    "Proto\"+\n\nUInt64Pair\022\r\n\005first\030\001 \001(\004\022\016\n\006se"
    "cond\030\002 \001(\004\"8\n\014PairSequence\022\032\n\005pairs\030\001 \003("
    "\0132\013.UInt64Pair\022\014\n\004misc\030\002 \001(\004", 468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scalar.proto", &protobuf_RegisterTypes);
  Scalar::default_instance_ = new Scalar();
  EmptyProto::default_instance_ = new EmptyProto();
  UInt64Pair::default_instance_ = new UInt64Pair();
  PairSequence::default_instance_ = new PairSequence();
  Scalar::default_instance_->InitAsDefaultInstance();
  EmptyProto::default_instance_->InitAsDefaultInstance();
  UInt64Pair::default_instance_->InitAsDefaultInstance();
  PairSequence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scalar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scalar_2eproto {
  StaticDescriptorInitializer_scalar_2eproto() {
    protobuf_AddDesc_scalar_2eproto();
  }
} static_descriptor_initializer_scalar_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Scalar_ScalarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scalar_ScalarType_descriptor_;
}
bool Scalar_ScalarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scalar_ScalarType Scalar::UNIT;
const Scalar_ScalarType Scalar::BOOL;
const Scalar_ScalarType Scalar::INT32;
const Scalar_ScalarType Scalar::INT64;
const Scalar_ScalarType Scalar::UINT32;
const Scalar_ScalarType Scalar::UINT64;
const Scalar_ScalarType Scalar::FLOAT;
const Scalar_ScalarType Scalar::DOUBLE;
const Scalar_ScalarType Scalar::STRING;
const Scalar_ScalarType Scalar::ScalarType_MIN;
const Scalar_ScalarType Scalar::ScalarType_MAX;
const int Scalar::ScalarType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar::kTypeFieldNumber;
const int Scalar::kBoolValueFieldNumber;
const int Scalar::kInt32ValueFieldNumber;
const int Scalar::kInt64ValueFieldNumber;
const int Scalar::kUint32ValueFieldNumber;
const int Scalar::kUint64ValueFieldNumber;
const int Scalar::kFloatValueFieldNumber;
const int Scalar::kDoubleValueFieldNumber;
const int Scalar::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar::Scalar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scalar)
}

void Scalar::InitAsDefaultInstance() {
}

Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Scalar)
}

void Scalar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  bool_value_ = false;
  int32_value_ = 0;
  int64_value_ = GOOGLE_LONGLONG(0);
  uint32_value_ = 0u;
  uint64_value_ = GOOGLE_ULONGLONG(0);
  float_value_ = 0;
  double_value_ = 0;
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scalar_descriptor_;
}

const Scalar& Scalar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scalar_2eproto();
  return *default_instance_;
}

Scalar* Scalar::default_instance_ = NULL;

Scalar* Scalar::New(::google::protobuf::Arena* arena) const {
  Scalar* n = new Scalar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Scalar)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Scalar, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Scalar*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bool_value_, double_value_);
    type_ = 1;
    float_value_ = 0;
  }
  if (has_string_value()) {
    string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scalar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Scalar.ScalarType type = 1 [default = UNIT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Scalar_ScalarType_IsValid(value)) {
            set_type(static_cast< ::Scalar_ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 2;
      case 2: {
        if (tag == 16) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int32_value;
        break;
      }

      // optional int32 int32_value = 3;
      case 3: {
        if (tag == 24) {
         parse_int32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int64_value;
        break;
      }

      // optional int64 int64_value = 4;
      case 4: {
        if (tag == 32) {
         parse_int64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uint32_value;
        break;
      }

      // optional uint32 uint32_value = 5;
      case 5: {
        if (tag == 40) {
         parse_uint32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_value_)));
          set_has_uint32_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uint64_value;
        break;
      }

      // optional uint64 uint64_value = 6;
      case 6: {
        if (tag == 48) {
         parse_uint64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_value_)));
          set_has_uint64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_float_value;
        break;
      }

      // optional float float_value = 7;
      case 7: {
        if (tag == 61) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_double_value;
        break;
      }

      // optional double double_value = 8;
      case 8: {
        if (tag == 65) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_string_value;
        break;
      }

      // optional string string_value = 9;
      case 9: {
        if (tag == 74) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Scalar.string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scalar)
  return false;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scalar)
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
  }

  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }

  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_value(), output);
  }

  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_value(), output);
  }

  // optional float float_value = 7;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->float_value(), output);
  }

  // optional double double_value = 8;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->double_value(), output);
  }

  // optional string string_value = 9;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->string_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scalar)
}

::google::protobuf::uint8* Scalar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Scalar)
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_value(), target);
  }

  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }

  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }

  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_value(), target);
  }

  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_value(), target);
  }

  // optional float float_value = 7;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->float_value(), target);
  }

  // optional double double_value = 8;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->double_value(), target);
  }

  // optional string string_value = 9;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scalar)
  return target;
}

int Scalar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Scalar)
  int total_size = 0;

  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional bool bool_value = 2;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional int32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }

    // optional int64 int64_value = 4;
    if (has_int64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
    }

    // optional uint32 uint32_value = 5;
    if (has_uint32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
    }

    // optional uint64 uint64_value = 6;
    if (has_uint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_value());
    }

    // optional float float_value = 7;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional double double_value = 8;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

  }
  // optional string string_value = 9;
  if (has_string_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Scalar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Scalar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scalar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Scalar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Scalar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_int32_value()) {
      set_int32_value(from.int32_value());
    }
    if (from.has_int64_value()) {
      set_int64_value(from.int64_value());
    }
    if (from.has_uint32_value()) {
      set_uint32_value(from.uint32_value());
    }
    if (from.has_uint64_value()) {
      set_uint64_value(from.uint64_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_string_value()) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scalar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar::InternalSwap(Scalar* other) {
  std::swap(type_, other->type_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(int32_value_, other->int32_value_);
  std::swap(int64_value_, other->int64_value_);
  std::swap(uint32_value_, other->uint32_value_);
  std::swap(uint64_value_, other->uint64_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(double_value_, other->double_value_);
  string_value_.Swap(&other->string_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scalar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scalar_descriptor_;
  metadata.reflection = Scalar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scalar

// required .Scalar.ScalarType type = 1 [default = UNIT];
bool Scalar::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scalar::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Scalar::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scalar::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::Scalar_ScalarType Scalar::type() const {
  // @@protoc_insertion_point(field_get:Scalar.type)
  return static_cast< ::Scalar_ScalarType >(type_);
}
 void Scalar::set_type(::Scalar_ScalarType value) {
  assert(::Scalar_ScalarType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Scalar.type)
}

// optional bool bool_value = 2;
bool Scalar::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scalar::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Scalar::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scalar::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
 bool Scalar::bool_value() const {
  // @@protoc_insertion_point(field_get:Scalar.bool_value)
  return bool_value_;
}
 void Scalar::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.bool_value)
}

// optional int32 int32_value = 3;
bool Scalar::has_int32_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scalar::set_has_int32_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Scalar::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scalar::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
 ::google::protobuf::int32 Scalar::int32_value() const {
  // @@protoc_insertion_point(field_get:Scalar.int32_value)
  return int32_value_;
}
 void Scalar::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.int32_value)
}

// optional int64 int64_value = 4;
bool Scalar::has_int64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Scalar::set_has_int64_value() {
  _has_bits_[0] |= 0x00000008u;
}
void Scalar::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void Scalar::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
 ::google::protobuf::int64 Scalar::int64_value() const {
  // @@protoc_insertion_point(field_get:Scalar.int64_value)
  return int64_value_;
}
 void Scalar::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.int64_value)
}

// optional uint32 uint32_value = 5;
bool Scalar::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Scalar::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000010u;
}
void Scalar::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void Scalar::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
 ::google::protobuf::uint32 Scalar::uint32_value() const {
  // @@protoc_insertion_point(field_get:Scalar.uint32_value)
  return uint32_value_;
}
 void Scalar::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.uint32_value)
}

// optional uint64 uint64_value = 6;
bool Scalar::has_uint64_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Scalar::set_has_uint64_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Scalar::clear_has_uint64_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Scalar::clear_uint64_value() {
  uint64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_value();
}
 ::google::protobuf::uint64 Scalar::uint64_value() const {
  // @@protoc_insertion_point(field_get:Scalar.uint64_value)
  return uint64_value_;
}
 void Scalar::set_uint64_value(::google::protobuf::uint64 value) {
  set_has_uint64_value();
  uint64_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.uint64_value)
}

// optional float float_value = 7;
bool Scalar::has_float_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Scalar::set_has_float_value() {
  _has_bits_[0] |= 0x00000040u;
}
void Scalar::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void Scalar::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
 float Scalar::float_value() const {
  // @@protoc_insertion_point(field_get:Scalar.float_value)
  return float_value_;
}
 void Scalar::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.float_value)
}

// optional double double_value = 8;
bool Scalar::has_double_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Scalar::set_has_double_value() {
  _has_bits_[0] |= 0x00000080u;
}
void Scalar::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void Scalar::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
 double Scalar::double_value() const {
  // @@protoc_insertion_point(field_get:Scalar.double_value)
  return double_value_;
}
 void Scalar::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.double_value)
}

// optional string string_value = 9;
bool Scalar::has_string_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Scalar::set_has_string_value() {
  _has_bits_[0] |= 0x00000100u;
}
void Scalar::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000100u;
}
void Scalar::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
 const ::std::string& Scalar::string_value() const {
  // @@protoc_insertion_point(field_get:Scalar.string_value)
  return string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scalar::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Scalar.string_value)
}
 void Scalar::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Scalar.string_value)
}
 void Scalar::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Scalar.string_value)
}
 ::std::string* Scalar::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:Scalar.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Scalar::release_string_value() {
  // @@protoc_insertion_point(field_release:Scalar.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scalar::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:Scalar.string_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyProto::EmptyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EmptyProto)
}

void EmptyProto::InitAsDefaultInstance() {
}

EmptyProto::EmptyProto(const EmptyProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EmptyProto)
}

void EmptyProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyProto::~EmptyProto() {
  // @@protoc_insertion_point(destructor:EmptyProto)
  SharedDtor();
}

void EmptyProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyProto_descriptor_;
}

const EmptyProto& EmptyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scalar_2eproto();
  return *default_instance_;
}

EmptyProto* EmptyProto::default_instance_ = NULL;

EmptyProto* EmptyProto::New(::google::protobuf::Arena* arena) const {
  EmptyProto* n = new EmptyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:EmptyProto)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmptyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EmptyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EmptyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EmptyProto)
  return false;
#undef DO_
}

void EmptyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EmptyProto)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EmptyProto)
}

::google::protobuf::uint8* EmptyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EmptyProto)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EmptyProto)
  return target;
}

int EmptyProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EmptyProto)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EmptyProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmptyProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EmptyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EmptyProto)
    MergeFrom(*source);
  }
}

void EmptyProto::MergeFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EmptyProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmptyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyProto::CopyFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyProto::IsInitialized() const {

  return true;
}

void EmptyProto::Swap(EmptyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyProto::InternalSwap(EmptyProto* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyProto_descriptor_;
  metadata.reflection = EmptyProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyProto

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Pair::kFirstFieldNumber;
const int UInt64Pair::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Pair::UInt64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UInt64Pair)
}

void UInt64Pair::InitAsDefaultInstance() {
}

UInt64Pair::UInt64Pair(const UInt64Pair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UInt64Pair)
}

void UInt64Pair::SharedCtor() {
  _cached_size_ = 0;
  first_ = GOOGLE_ULONGLONG(0);
  second_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UInt64Pair::~UInt64Pair() {
  // @@protoc_insertion_point(destructor:UInt64Pair)
  SharedDtor();
}

void UInt64Pair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UInt64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UInt64Pair_descriptor_;
}

const UInt64Pair& UInt64Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scalar_2eproto();
  return *default_instance_;
}

UInt64Pair* UInt64Pair::default_instance_ = NULL;

UInt64Pair* UInt64Pair::New(::google::protobuf::Arena* arena) const {
  UInt64Pair* n = new UInt64Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:UInt64Pair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UInt64Pair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UInt64Pair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(first_, second_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UInt64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UInt64Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 first = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional uint64 second = 2;
      case 2: {
        if (tag == 16) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UInt64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UInt64Pair)
  return false;
#undef DO_
}

void UInt64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UInt64Pair)
  // optional uint64 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first(), output);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UInt64Pair)
}

::google::protobuf::uint8* UInt64Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UInt64Pair)
  // optional uint64 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first(), target);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UInt64Pair)
  return target;
}

int UInt64Pair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UInt64Pair)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first());
    }

    // optional uint64 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UInt64Pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UInt64Pair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UInt64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UInt64Pair)
    MergeFrom(*source);
  }
}

void UInt64Pair::MergeFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UInt64Pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UInt64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Pair::CopyFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Pair::IsInitialized() const {

  return true;
}

void UInt64Pair::Swap(UInt64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Pair::InternalSwap(UInt64Pair* other) {
  std::swap(first_, other->first_);
  std::swap(second_, other->second_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UInt64Pair_descriptor_;
  metadata.reflection = UInt64Pair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64Pair

// optional uint64 first = 1;
bool UInt64Pair::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UInt64Pair::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void UInt64Pair::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void UInt64Pair::clear_first() {
  first_ = GOOGLE_ULONGLONG(0);
  clear_has_first();
}
 ::google::protobuf::uint64 UInt64Pair::first() const {
  // @@protoc_insertion_point(field_get:UInt64Pair.first)
  return first_;
}
 void UInt64Pair::set_first(::google::protobuf::uint64 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:UInt64Pair.first)
}

// optional uint64 second = 2;
bool UInt64Pair::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UInt64Pair::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
void UInt64Pair::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void UInt64Pair::clear_second() {
  second_ = GOOGLE_ULONGLONG(0);
  clear_has_second();
}
 ::google::protobuf::uint64 UInt64Pair::second() const {
  // @@protoc_insertion_point(field_get:UInt64Pair.second)
  return second_;
}
 void UInt64Pair::set_second(::google::protobuf::uint64 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:UInt64Pair.second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PairSequence::kPairsFieldNumber;
const int PairSequence::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PairSequence::PairSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PairSequence)
}

void PairSequence::InitAsDefaultInstance() {
}

PairSequence::PairSequence(const PairSequence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PairSequence)
}

void PairSequence::SharedCtor() {
  _cached_size_ = 0;
  misc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairSequence::~PairSequence() {
  // @@protoc_insertion_point(destructor:PairSequence)
  SharedDtor();
}

void PairSequence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairSequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairSequence_descriptor_;
}

const PairSequence& PairSequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scalar_2eproto();
  return *default_instance_;
}

PairSequence* PairSequence::default_instance_ = NULL;

PairSequence* PairSequence::New(::google::protobuf::Arena* arena) const {
  PairSequence* n = new PairSequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PairSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:PairSequence)
  misc_ = GOOGLE_ULONGLONG(0);
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PairSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PairSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UInt64Pair pairs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_misc;
        break;
      }

      // optional uint64 misc = 2;
      case 2: {
        if (tag == 16) {
         parse_misc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &misc_)));
          set_has_misc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PairSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PairSequence)
  return false;
#undef DO_
}

void PairSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PairSequence)
  // repeated .UInt64Pair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  // optional uint64 misc = 2;
  if (has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->misc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PairSequence)
}

::google::protobuf::uint8* PairSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PairSequence)
  // repeated .UInt64Pair pairs = 1;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pairs(i), false, target);
  }

  // optional uint64 misc = 2;
  if (has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->misc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PairSequence)
  return target;
}

int PairSequence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PairSequence)
  int total_size = 0;

  // optional uint64 misc = 2;
  if (has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->misc());
  }

  // repeated .UInt64Pair pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PairSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PairSequence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PairSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PairSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PairSequence)
    MergeFrom(*source);
  }
}

void PairSequence::MergeFrom(const PairSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PairSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pairs_.MergeFrom(from.pairs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_misc()) {
      set_misc(from.misc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PairSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PairSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairSequence::CopyFrom(const PairSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PairSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairSequence::IsInitialized() const {

  return true;
}

void PairSequence::Swap(PairSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PairSequence::InternalSwap(PairSequence* other) {
  pairs_.UnsafeArenaSwap(&other->pairs_);
  std::swap(misc_, other->misc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PairSequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairSequence_descriptor_;
  metadata.reflection = PairSequence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PairSequence

// repeated .UInt64Pair pairs = 1;
int PairSequence::pairs_size() const {
  return pairs_.size();
}
void PairSequence::clear_pairs() {
  pairs_.Clear();
}
const ::UInt64Pair& PairSequence::pairs(int index) const {
  // @@protoc_insertion_point(field_get:PairSequence.pairs)
  return pairs_.Get(index);
}
::UInt64Pair* PairSequence::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:PairSequence.pairs)
  return pairs_.Mutable(index);
}
::UInt64Pair* PairSequence::add_pairs() {
  // @@protoc_insertion_point(field_add:PairSequence.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::UInt64Pair >*
PairSequence::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:PairSequence.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::UInt64Pair >&
PairSequence::pairs() const {
  // @@protoc_insertion_point(field_list:PairSequence.pairs)
  return pairs_;
}

// optional uint64 misc = 2;
bool PairSequence::has_misc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PairSequence::set_has_misc() {
  _has_bits_[0] |= 0x00000002u;
}
void PairSequence::clear_has_misc() {
  _has_bits_[0] &= ~0x00000002u;
}
void PairSequence::clear_misc() {
  misc_ = GOOGLE_ULONGLONG(0);
  clear_has_misc();
}
 ::google::protobuf::uint64 PairSequence::misc() const {
  // @@protoc_insertion_point(field_get:PairSequence.misc)
  return misc_;
}
 void PairSequence::set_misc(::google::protobuf::uint64 value) {
  set_has_misc();
  misc_ = value;
  // @@protoc_insertion_point(field_set:PairSequence.misc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
