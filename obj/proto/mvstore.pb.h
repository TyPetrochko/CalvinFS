// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvstore.proto

#ifndef PROTOBUF_mvstore_2eproto__INCLUDED
#define PROTOBUF_mvstore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mvstore_2eproto();
void protobuf_AssignDesc_mvstore_2eproto();
void protobuf_ShutdownFile_mvstore_2eproto();

class MVStoreAppendInput;
class MVStoreAppendOutput;
class MVStoreIncrementInput;
class MVStoreIncrementOutput;
class MVStoreMicroInput;
class MVStoreMicroOutput;
class MVStoreReadInput;
class MVStoreReadOutput;
class MVStoreWriteInput;

// ===================================================================

class MVStoreWriteInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreWriteInput) */ {
 public:
  MVStoreWriteInput();
  virtual ~MVStoreWriteInput();

  MVStoreWriteInput(const MVStoreWriteInput& from);

  inline MVStoreWriteInput& operator=(const MVStoreWriteInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreWriteInput& default_instance();

  void Swap(MVStoreWriteInput* other);

  // implements Message ----------------------------------------------

  inline MVStoreWriteInput* New() const { return New(NULL); }

  MVStoreWriteInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreWriteInput& from);
  void MergeFrom(const MVStoreWriteInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreWriteInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MVStoreWriteInput)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreWriteInput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreReadInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreReadInput) */ {
 public:
  MVStoreReadInput();
  virtual ~MVStoreReadInput();

  MVStoreReadInput(const MVStoreReadInput& from);

  inline MVStoreReadInput& operator=(const MVStoreReadInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreReadInput& default_instance();

  void Swap(MVStoreReadInput* other);

  // implements Message ----------------------------------------------

  inline MVStoreReadInput* New() const { return New(NULL); }

  MVStoreReadInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreReadInput& from);
  void MergeFrom(const MVStoreReadInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreReadInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:MVStoreReadInput)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreReadInput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreReadOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreReadOutput) */ {
 public:
  MVStoreReadOutput();
  virtual ~MVStoreReadOutput();

  MVStoreReadOutput(const MVStoreReadOutput& from);

  inline MVStoreReadOutput& operator=(const MVStoreReadOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreReadOutput& default_instance();

  void Swap(MVStoreReadOutput* other);

  // implements Message ----------------------------------------------

  inline MVStoreReadOutput* New() const { return New(NULL); }

  MVStoreReadOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreReadOutput& from);
  void MergeFrom(const MVStoreReadOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreReadOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool exists = 1;
  bool has_exists() const;
  void clear_exists();
  static const int kExistsFieldNumber = 1;
  bool exists() const;
  void set_exists(bool value);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MVStoreReadOutput)
 private:
  inline void set_has_exists();
  inline void clear_has_exists();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool exists_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreReadOutput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreAppendInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreAppendInput) */ {
 public:
  MVStoreAppendInput();
  virtual ~MVStoreAppendInput();

  MVStoreAppendInput(const MVStoreAppendInput& from);

  inline MVStoreAppendInput& operator=(const MVStoreAppendInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreAppendInput& default_instance();

  void Swap(MVStoreAppendInput* other);

  // implements Message ----------------------------------------------

  inline MVStoreAppendInput* New() const { return New(NULL); }

  MVStoreAppendInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreAppendInput& from);
  void MergeFrom(const MVStoreAppendInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreAppendInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MVStoreAppendInput)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreAppendInput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreAppendOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreAppendOutput) */ {
 public:
  MVStoreAppendOutput();
  virtual ~MVStoreAppendOutput();

  MVStoreAppendOutput(const MVStoreAppendOutput& from);

  inline MVStoreAppendOutput& operator=(const MVStoreAppendOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreAppendOutput& default_instance();

  void Swap(MVStoreAppendOutput* other);

  // implements Message ----------------------------------------------

  inline MVStoreAppendOutput* New() const { return New(NULL); }

  MVStoreAppendOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreAppendOutput& from);
  void MergeFrom(const MVStoreAppendOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreAppendOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:MVStoreAppendOutput)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreAppendOutput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreIncrementInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreIncrementInput) */ {
 public:
  MVStoreIncrementInput();
  virtual ~MVStoreIncrementInput();

  MVStoreIncrementInput(const MVStoreIncrementInput& from);

  inline MVStoreIncrementInput& operator=(const MVStoreIncrementInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreIncrementInput& default_instance();

  void Swap(MVStoreIncrementInput* other);

  // implements Message ----------------------------------------------

  inline MVStoreIncrementInput* New() const { return New(NULL); }

  MVStoreIncrementInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreIncrementInput& from);
  void MergeFrom(const MVStoreIncrementInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreIncrementInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:MVStoreIncrementInput)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreIncrementInput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreIncrementOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreIncrementOutput) */ {
 public:
  MVStoreIncrementOutput();
  virtual ~MVStoreIncrementOutput();

  MVStoreIncrementOutput(const MVStoreIncrementOutput& from);

  inline MVStoreIncrementOutput& operator=(const MVStoreIncrementOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreIncrementOutput& default_instance();

  void Swap(MVStoreIncrementOutput* other);

  // implements Message ----------------------------------------------

  inline MVStoreIncrementOutput* New() const { return New(NULL); }

  MVStoreIncrementOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreIncrementOutput& from);
  void MergeFrom(const MVStoreIncrementOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreIncrementOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:MVStoreIncrementOutput)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreIncrementOutput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreMicroInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreMicroInput) */ {
 public:
  MVStoreMicroInput();
  virtual ~MVStoreMicroInput();

  MVStoreMicroInput(const MVStoreMicroInput& from);

  inline MVStoreMicroInput& operator=(const MVStoreMicroInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreMicroInput& default_instance();

  void Swap(MVStoreMicroInput* other);

  // implements Message ----------------------------------------------

  inline MVStoreMicroInput* New() const { return New(NULL); }

  MVStoreMicroInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreMicroInput& from);
  void MergeFrom(const MVStoreMicroInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreMicroInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // optional int32 writes = 2 [default = 10];
  bool has_writes() const;
  void clear_writes();
  static const int kWritesFieldNumber = 2;
  ::google::protobuf::int32 writes() const;
  void set_writes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MVStoreMicroInput)
 private:
  inline void set_has_writes();
  inline void clear_has_writes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::int32 writes_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreMicroInput* default_instance_;
};
// -------------------------------------------------------------------

class MVStoreMicroOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MVStoreMicroOutput) */ {
 public:
  MVStoreMicroOutput();
  virtual ~MVStoreMicroOutput();

  MVStoreMicroOutput(const MVStoreMicroOutput& from);

  inline MVStoreMicroOutput& operator=(const MVStoreMicroOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVStoreMicroOutput& default_instance();

  void Swap(MVStoreMicroOutput* other);

  // implements Message ----------------------------------------------

  inline MVStoreMicroOutput* New() const { return New(NULL); }

  MVStoreMicroOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVStoreMicroOutput& from);
  void MergeFrom(const MVStoreMicroOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVStoreMicroOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:MVStoreMicroOutput)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_mvstore_2eproto();
  friend void protobuf_AssignDesc_mvstore_2eproto();
  friend void protobuf_ShutdownFile_mvstore_2eproto();

  void InitAsDefaultInstance();
  static MVStoreMicroOutput* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreWriteInput

// required bytes key = 1;
inline bool MVStoreWriteInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreWriteInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreWriteInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreWriteInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MVStoreWriteInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreWriteInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.key)
}
inline void MVStoreWriteInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.key)
}
inline void MVStoreWriteInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.key)
}
inline ::std::string* MVStoreWriteInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreWriteInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreWriteInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.key)
}

// required bytes value = 2;
inline bool MVStoreWriteInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVStoreWriteInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVStoreWriteInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVStoreWriteInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MVStoreWriteInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreWriteInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.value)
}
inline void MVStoreWriteInput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.value)
}
inline void MVStoreWriteInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.value)
}
inline ::std::string* MVStoreWriteInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreWriteInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreWriteInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.value)
}

// -------------------------------------------------------------------

// MVStoreReadInput

// required bytes key = 1;
inline bool MVStoreReadInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreReadInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreReadInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreReadInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MVStoreReadInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreReadInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreReadInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadInput.key)
}
inline void MVStoreReadInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadInput.key)
}
inline void MVStoreReadInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadInput.key)
}
inline ::std::string* MVStoreReadInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreReadInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreReadInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreReadInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreReadInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadInput.key)
}

// -------------------------------------------------------------------

// MVStoreReadOutput

// required bool exists = 1;
inline bool MVStoreReadOutput::has_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreReadOutput::set_has_exists() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreReadOutput::clear_has_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreReadOutput::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
inline bool MVStoreReadOutput::exists() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.exists)
  return exists_;
}
inline void MVStoreReadOutput::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.exists)
}

// optional bytes value = 2;
inline bool MVStoreReadOutput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVStoreReadOutput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVStoreReadOutput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVStoreReadOutput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MVStoreReadOutput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreReadOutput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.value)
}
inline void MVStoreReadOutput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadOutput.value)
}
inline void MVStoreReadOutput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadOutput.value)
}
inline ::std::string* MVStoreReadOutput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreReadOutput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreReadOutput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreReadOutput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreReadOutput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadOutput.value)
}

// -------------------------------------------------------------------

// MVStoreAppendInput

// required bytes key = 1;
inline bool MVStoreAppendInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreAppendInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreAppendInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreAppendInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MVStoreAppendInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreAppendInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.key)
}
inline void MVStoreAppendInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.key)
}
inline void MVStoreAppendInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.key)
}
inline ::std::string* MVStoreAppendInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreAppendInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreAppendInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.key)
}

// required bytes value = 2;
inline bool MVStoreAppendInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVStoreAppendInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVStoreAppendInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVStoreAppendInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MVStoreAppendInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreAppendInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.value)
}
inline void MVStoreAppendInput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.value)
}
inline void MVStoreAppendInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.value)
}
inline ::std::string* MVStoreAppendInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreAppendInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreAppendInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.value)
}

// -------------------------------------------------------------------

// MVStoreAppendOutput

// required bool success = 1;
inline bool MVStoreAppendOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreAppendOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreAppendOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreAppendOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MVStoreAppendOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendOutput.success)
  return success_;
}
inline void MVStoreAppendOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreAppendOutput.success)
}

// -------------------------------------------------------------------

// MVStoreIncrementInput

// required bytes key = 1;
inline bool MVStoreIncrementInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreIncrementInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreIncrementInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreIncrementInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MVStoreIncrementInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreIncrementInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreIncrementInput.key)
}
inline void MVStoreIncrementInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreIncrementInput.key)
}
inline void MVStoreIncrementInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreIncrementInput.key)
}
inline ::std::string* MVStoreIncrementInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreIncrementInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MVStoreIncrementInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreIncrementInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MVStoreIncrementInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreIncrementInput.key)
}

// -------------------------------------------------------------------

// MVStoreIncrementOutput

// required bool success = 1;
inline bool MVStoreIncrementOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreIncrementOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreIncrementOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreIncrementOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MVStoreIncrementOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementOutput.success)
  return success_;
}
inline void MVStoreIncrementOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreIncrementOutput.success)
}

// -------------------------------------------------------------------

// MVStoreMicroInput

// repeated bytes keys = 1;
inline int MVStoreMicroInput::keys_size() const {
  return keys_.size();
}
inline void MVStoreMicroInput::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& MVStoreMicroInput::keys(int index) const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.keys)
  return keys_.Get(index);
}
inline ::std::string* MVStoreMicroInput::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:MVStoreMicroInput.keys)
  return keys_.Mutable(index);
}
inline void MVStoreMicroInput::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.keys)
  keys_.Mutable(index)->assign(value);
}
inline void MVStoreMicroInput::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MVStoreMicroInput.keys)
}
inline void MVStoreMicroInput::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MVStoreMicroInput.keys)
}
inline ::std::string* MVStoreMicroInput::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:MVStoreMicroInput.keys)
  return keys_.Add();
}
inline void MVStoreMicroInput::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MVStoreMicroInput.keys)
}
inline void MVStoreMicroInput::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MVStoreMicroInput.keys)
}
inline void MVStoreMicroInput::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MVStoreMicroInput.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MVStoreMicroInput::keys() const {
  // @@protoc_insertion_point(field_list:MVStoreMicroInput.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MVStoreMicroInput::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:MVStoreMicroInput.keys)
  return &keys_;
}

// optional int32 writes = 2 [default = 10];
inline bool MVStoreMicroInput::has_writes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVStoreMicroInput::set_has_writes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVStoreMicroInput::clear_has_writes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVStoreMicroInput::clear_writes() {
  writes_ = 10;
  clear_has_writes();
}
inline ::google::protobuf::int32 MVStoreMicroInput::writes() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.writes)
  return writes_;
}
inline void MVStoreMicroInput::set_writes(::google::protobuf::int32 value) {
  set_has_writes();
  writes_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.writes)
}

// -------------------------------------------------------------------

// MVStoreMicroOutput

// required bool success = 1;
inline bool MVStoreMicroOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVStoreMicroOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVStoreMicroOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVStoreMicroOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MVStoreMicroOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroOutput.success)
  return success_;
}
inline void MVStoreMicroOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroOutput.success)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mvstore_2eproto__INCLUDED
