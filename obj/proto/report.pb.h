// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef PROTOBUF_report_2eproto__INCLUDED
#define PROTOBUF_report_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "scalar.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_report_2eproto();
void protobuf_AssignDesc_report_2eproto();
void protobuf_ShutdownFile_report_2eproto();

class Report;
class Report_Datum;

// ===================================================================

class Report_Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Report.Datum) */ {
 public:
  Report_Datum();
  virtual ~Report_Datum();

  Report_Datum(const Report_Datum& from);

  inline Report_Datum& operator=(const Report_Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Report_Datum& default_instance();

  void Swap(Report_Datum* other);

  // implements Message ----------------------------------------------

  inline Report_Datum* New() const { return New(NULL); }

  Report_Datum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Report_Datum& from);
  void MergeFrom(const Report_Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Report_Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string quantity = 1;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 1;
  const ::std::string& quantity() const;
  void set_quantity(const ::std::string& value);
  void set_quantity(const char* value);
  void set_quantity(const char* value, size_t size);
  ::std::string* mutable_quantity();
  ::std::string* release_quantity();
  void set_allocated_quantity(::std::string* quantity);

  // optional .Scalar value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::Scalar& value() const;
  ::Scalar* mutable_value();
  ::Scalar* release_value();
  void set_allocated_value(::Scalar* value);

  // @@protoc_insertion_point(class_scope:Report.Datum)
 private:
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr quantity_;
  ::Scalar* value_;
  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static Report_Datum* default_instance_;
};
// -------------------------------------------------------------------

class Report : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Report& default_instance();

  void Swap(Report* other);

  // implements Message ----------------------------------------------

  inline Report* New() const { return New(NULL); }

  Report* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Report* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Report_Datum Datum;

  // accessors -------------------------------------------------------

  // optional string app = 1;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 1;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // optional double time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  double time() const;
  void set_time(double value);

  // repeated .Report.Datum data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::Report_Datum& data(int index) const;
  ::Report_Datum* mutable_data(int index);
  ::Report_Datum* add_data();
  ::google::protobuf::RepeatedPtrField< ::Report_Datum >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::Report_Datum >&
      data() const;

  // @@protoc_insertion_point(class_scope:Report)
 private:
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  double time_;
  ::google::protobuf::RepeatedPtrField< ::Report_Datum > data_;
  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static Report* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Report_Datum

// optional string quantity = 1;
inline bool Report_Datum::has_quantity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Report_Datum::set_has_quantity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Report_Datum::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Report_Datum::clear_quantity() {
  quantity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_quantity();
}
inline const ::std::string& Report_Datum::quantity() const {
  // @@protoc_insertion_point(field_get:Report.Datum.quantity)
  return quantity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report_Datum::set_quantity(const ::std::string& value) {
  set_has_quantity();
  quantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Report.Datum.quantity)
}
inline void Report_Datum::set_quantity(const char* value) {
  set_has_quantity();
  quantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Report.Datum.quantity)
}
inline void Report_Datum::set_quantity(const char* value, size_t size) {
  set_has_quantity();
  quantity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Report.Datum.quantity)
}
inline ::std::string* Report_Datum::mutable_quantity() {
  set_has_quantity();
  // @@protoc_insertion_point(field_mutable:Report.Datum.quantity)
  return quantity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report_Datum::release_quantity() {
  // @@protoc_insertion_point(field_release:Report.Datum.quantity)
  clear_has_quantity();
  return quantity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report_Datum::set_allocated_quantity(::std::string* quantity) {
  if (quantity != NULL) {
    set_has_quantity();
  } else {
    clear_has_quantity();
  }
  quantity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quantity);
  // @@protoc_insertion_point(field_set_allocated:Report.Datum.quantity)
}

// optional .Scalar value = 2;
inline bool Report_Datum::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Report_Datum::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Report_Datum::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Report_Datum::clear_value() {
  if (value_ != NULL) value_->::Scalar::Clear();
  clear_has_value();
}
inline const ::Scalar& Report_Datum::value() const {
  // @@protoc_insertion_point(field_get:Report.Datum.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Scalar* Report_Datum::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Report.Datum.value)
  return value_;
}
inline ::Scalar* Report_Datum::release_value() {
  // @@protoc_insertion_point(field_release:Report.Datum.value)
  clear_has_value();
  ::Scalar* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Report_Datum::set_allocated_value(::Scalar* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Report.Datum.value)
}

// -------------------------------------------------------------------

// Report

// optional string app = 1;
inline bool Report::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Report::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Report::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Report::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
inline const ::std::string& Report::app() const {
  // @@protoc_insertion_point(field_get:Report.app)
  return app_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Report.app)
}
inline void Report::set_app(const char* value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Report.app)
}
inline void Report::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Report.app)
}
inline ::std::string* Report::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:Report.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_app() {
  // @@protoc_insertion_point(field_release:Report.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:Report.app)
}

// optional double time = 2;
inline bool Report::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Report::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Report::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Report::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Report::time() const {
  // @@protoc_insertion_point(field_get:Report.time)
  return time_;
}
inline void Report::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Report.time)
}

// repeated .Report.Datum data = 3;
inline int Report::data_size() const {
  return data_.size();
}
inline void Report::clear_data() {
  data_.Clear();
}
inline const ::Report_Datum& Report::data(int index) const {
  // @@protoc_insertion_point(field_get:Report.data)
  return data_.Get(index);
}
inline ::Report_Datum* Report::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Report.data)
  return data_.Mutable(index);
}
inline ::Report_Datum* Report::add_data() {
  // @@protoc_insertion_point(field_add:Report.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Report_Datum >*
Report::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Report.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Report_Datum >&
Report::data() const {
  // @@protoc_insertion_point(field_list:Report.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_report_2eproto__INCLUDED
