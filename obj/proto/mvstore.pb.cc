// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvstore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mvstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MVStoreWriteInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreWriteInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreReadInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreReadInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreReadOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreReadOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreAppendInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreAppendInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreAppendOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreAppendOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreIncrementInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreIncrementInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreIncrementOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreIncrementOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreMicroInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreMicroInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVStoreMicroOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVStoreMicroOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mvstore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mvstore_2eproto() {
  protobuf_AddDesc_mvstore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mvstore.proto");
  GOOGLE_CHECK(file != NULL);
  MVStoreWriteInput_descriptor_ = file->message_type(0);
  static const int MVStoreWriteInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, value_),
  };
  MVStoreWriteInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreWriteInput_descriptor_,
      MVStoreWriteInput::default_instance_,
      MVStoreWriteInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreWriteInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, _internal_metadata_),
      -1);
  MVStoreReadInput_descriptor_ = file->message_type(1);
  static const int MVStoreReadInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, key_),
  };
  MVStoreReadInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreReadInput_descriptor_,
      MVStoreReadInput::default_instance_,
      MVStoreReadInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreReadInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, _internal_metadata_),
      -1);
  MVStoreReadOutput_descriptor_ = file->message_type(2);
  static const int MVStoreReadOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, value_),
  };
  MVStoreReadOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreReadOutput_descriptor_,
      MVStoreReadOutput::default_instance_,
      MVStoreReadOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreReadOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, _internal_metadata_),
      -1);
  MVStoreAppendInput_descriptor_ = file->message_type(3);
  static const int MVStoreAppendInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, value_),
  };
  MVStoreAppendInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreAppendInput_descriptor_,
      MVStoreAppendInput::default_instance_,
      MVStoreAppendInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreAppendInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, _internal_metadata_),
      -1);
  MVStoreAppendOutput_descriptor_ = file->message_type(4);
  static const int MVStoreAppendOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, success_),
  };
  MVStoreAppendOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreAppendOutput_descriptor_,
      MVStoreAppendOutput::default_instance_,
      MVStoreAppendOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreAppendOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, _internal_metadata_),
      -1);
  MVStoreIncrementInput_descriptor_ = file->message_type(5);
  static const int MVStoreIncrementInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, key_),
  };
  MVStoreIncrementInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreIncrementInput_descriptor_,
      MVStoreIncrementInput::default_instance_,
      MVStoreIncrementInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreIncrementInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, _internal_metadata_),
      -1);
  MVStoreIncrementOutput_descriptor_ = file->message_type(6);
  static const int MVStoreIncrementOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, success_),
  };
  MVStoreIncrementOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreIncrementOutput_descriptor_,
      MVStoreIncrementOutput::default_instance_,
      MVStoreIncrementOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreIncrementOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, _internal_metadata_),
      -1);
  MVStoreMicroInput_descriptor_ = file->message_type(7);
  static const int MVStoreMicroInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, writes_),
  };
  MVStoreMicroInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreMicroInput_descriptor_,
      MVStoreMicroInput::default_instance_,
      MVStoreMicroInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreMicroInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, _internal_metadata_),
      -1);
  MVStoreMicroOutput_descriptor_ = file->message_type(8);
  static const int MVStoreMicroOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, success_),
  };
  MVStoreMicroOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVStoreMicroOutput_descriptor_,
      MVStoreMicroOutput::default_instance_,
      MVStoreMicroOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVStoreMicroOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mvstore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreWriteInput_descriptor_, &MVStoreWriteInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreReadInput_descriptor_, &MVStoreReadInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreReadOutput_descriptor_, &MVStoreReadOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreAppendInput_descriptor_, &MVStoreAppendInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreAppendOutput_descriptor_, &MVStoreAppendOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreIncrementInput_descriptor_, &MVStoreIncrementInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreIncrementOutput_descriptor_, &MVStoreIncrementOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreMicroInput_descriptor_, &MVStoreMicroInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVStoreMicroOutput_descriptor_, &MVStoreMicroOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mvstore_2eproto() {
  delete MVStoreWriteInput::default_instance_;
  delete MVStoreWriteInput_reflection_;
  delete MVStoreReadInput::default_instance_;
  delete MVStoreReadInput_reflection_;
  delete MVStoreReadOutput::default_instance_;
  delete MVStoreReadOutput_reflection_;
  delete MVStoreAppendInput::default_instance_;
  delete MVStoreAppendInput_reflection_;
  delete MVStoreAppendOutput::default_instance_;
  delete MVStoreAppendOutput_reflection_;
  delete MVStoreIncrementInput::default_instance_;
  delete MVStoreIncrementInput_reflection_;
  delete MVStoreIncrementOutput::default_instance_;
  delete MVStoreIncrementOutput_reflection_;
  delete MVStoreMicroInput::default_instance_;
  delete MVStoreMicroInput_reflection_;
  delete MVStoreMicroOutput::default_instance_;
  delete MVStoreMicroOutput_reflection_;
}

void protobuf_AddDesc_mvstore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mvstore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmvstore.proto\"/\n\021MVStoreWriteInput\022\013\n\003"
    "key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\037\n\020MVStoreReadI"
    "nput\022\013\n\003key\030\001 \002(\014\"2\n\021MVStoreReadOutput\022\016"
    "\n\006exists\030\001 \002(\010\022\r\n\005value\030\002 \001(\014\"0\n\022MVStore"
    "AppendInput\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\""
    "&\n\023MVStoreAppendOutput\022\017\n\007success\030\001 \002(\010\""
    "$\n\025MVStoreIncrementInput\022\013\n\003key\030\001 \002(\014\")\n"
    "\026MVStoreIncrementOutput\022\017\n\007success\030\001 \002(\010"
    "\"5\n\021MVStoreMicroInput\022\014\n\004keys\030\001 \003(\014\022\022\n\006w"
    "rites\030\002 \001(\005:\00210\"%\n\022MVStoreMicroOutput\022\017\n"
    "\007success\030\001 \002(\010", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mvstore.proto", &protobuf_RegisterTypes);
  MVStoreWriteInput::default_instance_ = new MVStoreWriteInput();
  MVStoreReadInput::default_instance_ = new MVStoreReadInput();
  MVStoreReadOutput::default_instance_ = new MVStoreReadOutput();
  MVStoreAppendInput::default_instance_ = new MVStoreAppendInput();
  MVStoreAppendOutput::default_instance_ = new MVStoreAppendOutput();
  MVStoreIncrementInput::default_instance_ = new MVStoreIncrementInput();
  MVStoreIncrementOutput::default_instance_ = new MVStoreIncrementOutput();
  MVStoreMicroInput::default_instance_ = new MVStoreMicroInput();
  MVStoreMicroOutput::default_instance_ = new MVStoreMicroOutput();
  MVStoreWriteInput::default_instance_->InitAsDefaultInstance();
  MVStoreReadInput::default_instance_->InitAsDefaultInstance();
  MVStoreReadOutput::default_instance_->InitAsDefaultInstance();
  MVStoreAppendInput::default_instance_->InitAsDefaultInstance();
  MVStoreAppendOutput::default_instance_->InitAsDefaultInstance();
  MVStoreIncrementInput::default_instance_->InitAsDefaultInstance();
  MVStoreIncrementOutput::default_instance_->InitAsDefaultInstance();
  MVStoreMicroInput::default_instance_->InitAsDefaultInstance();
  MVStoreMicroOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mvstore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mvstore_2eproto {
  StaticDescriptorInitializer_mvstore_2eproto() {
    protobuf_AddDesc_mvstore_2eproto();
  }
} static_descriptor_initializer_mvstore_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreWriteInput::kKeyFieldNumber;
const int MVStoreWriteInput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreWriteInput::MVStoreWriteInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreWriteInput)
}

void MVStoreWriteInput::InitAsDefaultInstance() {
}

MVStoreWriteInput::MVStoreWriteInput(const MVStoreWriteInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreWriteInput)
}

void MVStoreWriteInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreWriteInput::~MVStoreWriteInput() {
  // @@protoc_insertion_point(destructor:MVStoreWriteInput)
  SharedDtor();
}

void MVStoreWriteInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVStoreWriteInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreWriteInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreWriteInput_descriptor_;
}

const MVStoreWriteInput& MVStoreWriteInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreWriteInput* MVStoreWriteInput::default_instance_ = NULL;

MVStoreWriteInput* MVStoreWriteInput::New(::google::protobuf::Arena* arena) const {
  MVStoreWriteInput* n = new MVStoreWriteInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreWriteInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreWriteInput)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreWriteInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreWriteInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreWriteInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreWriteInput)
  return false;
#undef DO_
}

void MVStoreWriteInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreWriteInput)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreWriteInput)
}

::google::protobuf::uint8* MVStoreWriteInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreWriteInput)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreWriteInput)
  return target;
}

int MVStoreWriteInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MVStoreWriteInput)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int MVStoreWriteInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreWriteInput)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreWriteInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreWriteInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreWriteInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreWriteInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreWriteInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreWriteInput)
    MergeFrom(*source);
  }
}

void MVStoreWriteInput::MergeFrom(const MVStoreWriteInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreWriteInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreWriteInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreWriteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreWriteInput::CopyFrom(const MVStoreWriteInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreWriteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreWriteInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MVStoreWriteInput::Swap(MVStoreWriteInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreWriteInput::InternalSwap(MVStoreWriteInput* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreWriteInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreWriteInput_descriptor_;
  metadata.reflection = MVStoreWriteInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreWriteInput

// required bytes key = 1;
bool MVStoreWriteInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreWriteInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreWriteInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreWriteInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVStoreWriteInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreWriteInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.key)
}
 void MVStoreWriteInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.key)
}
 void MVStoreWriteInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.key)
}
 ::std::string* MVStoreWriteInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreWriteInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreWriteInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.key)
}

// required bytes value = 2;
bool MVStoreWriteInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreWriteInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreWriteInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreWriteInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MVStoreWriteInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreWriteInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.value)
}
 void MVStoreWriteInput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.value)
}
 void MVStoreWriteInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.value)
}
 ::std::string* MVStoreWriteInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreWriteInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreWriteInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreReadInput::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreReadInput::MVStoreReadInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreReadInput)
}

void MVStoreReadInput::InitAsDefaultInstance() {
}

MVStoreReadInput::MVStoreReadInput(const MVStoreReadInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreReadInput)
}

void MVStoreReadInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreReadInput::~MVStoreReadInput() {
  // @@protoc_insertion_point(destructor:MVStoreReadInput)
  SharedDtor();
}

void MVStoreReadInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVStoreReadInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreReadInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreReadInput_descriptor_;
}

const MVStoreReadInput& MVStoreReadInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreReadInput* MVStoreReadInput::default_instance_ = NULL;

MVStoreReadInput* MVStoreReadInput::New(::google::protobuf::Arena* arena) const {
  MVStoreReadInput* n = new MVStoreReadInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreReadInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreReadInput)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreReadInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreReadInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreReadInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreReadInput)
  return false;
#undef DO_
}

void MVStoreReadInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreReadInput)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreReadInput)
}

::google::protobuf::uint8* MVStoreReadInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreReadInput)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreReadInput)
  return target;
}

int MVStoreReadInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreReadInput)
  int total_size = 0;

  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreReadInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreReadInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreReadInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreReadInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreReadInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreReadInput)
    MergeFrom(*source);
  }
}

void MVStoreReadInput::MergeFrom(const MVStoreReadInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreReadInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreReadInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreReadInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreReadInput::CopyFrom(const MVStoreReadInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreReadInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreReadInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreReadInput::Swap(MVStoreReadInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreReadInput::InternalSwap(MVStoreReadInput* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreReadInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreReadInput_descriptor_;
  metadata.reflection = MVStoreReadInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreReadInput

// required bytes key = 1;
bool MVStoreReadInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreReadInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreReadInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreReadInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVStoreReadInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreReadInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreReadInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadInput.key)
}
 void MVStoreReadInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadInput.key)
}
 void MVStoreReadInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadInput.key)
}
 ::std::string* MVStoreReadInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreReadInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreReadInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreReadInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreReadInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadInput.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreReadOutput::kExistsFieldNumber;
const int MVStoreReadOutput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreReadOutput::MVStoreReadOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreReadOutput)
}

void MVStoreReadOutput::InitAsDefaultInstance() {
}

MVStoreReadOutput::MVStoreReadOutput(const MVStoreReadOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreReadOutput)
}

void MVStoreReadOutput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exists_ = false;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreReadOutput::~MVStoreReadOutput() {
  // @@protoc_insertion_point(destructor:MVStoreReadOutput)
  SharedDtor();
}

void MVStoreReadOutput::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVStoreReadOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreReadOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreReadOutput_descriptor_;
}

const MVStoreReadOutput& MVStoreReadOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreReadOutput* MVStoreReadOutput::default_instance_ = NULL;

MVStoreReadOutput* MVStoreReadOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreReadOutput* n = new MVStoreReadOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreReadOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreReadOutput)
  if (_has_bits_[0 / 32] & 3u) {
    exists_ = false;
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreReadOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreReadOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool exists = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
          set_has_exists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreReadOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreReadOutput)
  return false;
#undef DO_
}

void MVStoreReadOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreReadOutput)
  // required bool exists = 1;
  if (has_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exists(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreReadOutput)
}

::google::protobuf::uint8* MVStoreReadOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreReadOutput)
  // required bool exists = 1;
  if (has_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exists(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreReadOutput)
  return target;
}

int MVStoreReadOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreReadOutput)
  int total_size = 0;

  // required bool exists = 1;
  if (has_exists()) {
    total_size += 1 + 1;
  }
  // optional bytes value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreReadOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreReadOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreReadOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreReadOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreReadOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreReadOutput)
    MergeFrom(*source);
  }
}

void MVStoreReadOutput::MergeFrom(const MVStoreReadOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreReadOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exists()) {
      set_exists(from.exists());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreReadOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreReadOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreReadOutput::CopyFrom(const MVStoreReadOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreReadOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreReadOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreReadOutput::Swap(MVStoreReadOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreReadOutput::InternalSwap(MVStoreReadOutput* other) {
  std::swap(exists_, other->exists_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreReadOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreReadOutput_descriptor_;
  metadata.reflection = MVStoreReadOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreReadOutput

// required bool exists = 1;
bool MVStoreReadOutput::has_exists() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreReadOutput::set_has_exists() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreReadOutput::clear_has_exists() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreReadOutput::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
 bool MVStoreReadOutput::exists() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.exists)
  return exists_;
}
 void MVStoreReadOutput::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.exists)
}

// optional bytes value = 2;
bool MVStoreReadOutput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreReadOutput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreReadOutput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreReadOutput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MVStoreReadOutput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreReadOutput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.value)
}
 void MVStoreReadOutput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadOutput.value)
}
 void MVStoreReadOutput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadOutput.value)
}
 ::std::string* MVStoreReadOutput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreReadOutput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreReadOutput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreReadOutput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreReadOutput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadOutput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreAppendInput::kKeyFieldNumber;
const int MVStoreAppendInput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreAppendInput::MVStoreAppendInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreAppendInput)
}

void MVStoreAppendInput::InitAsDefaultInstance() {
}

MVStoreAppendInput::MVStoreAppendInput(const MVStoreAppendInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreAppendInput)
}

void MVStoreAppendInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreAppendInput::~MVStoreAppendInput() {
  // @@protoc_insertion_point(destructor:MVStoreAppendInput)
  SharedDtor();
}

void MVStoreAppendInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVStoreAppendInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreAppendInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreAppendInput_descriptor_;
}

const MVStoreAppendInput& MVStoreAppendInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreAppendInput* MVStoreAppendInput::default_instance_ = NULL;

MVStoreAppendInput* MVStoreAppendInput::New(::google::protobuf::Arena* arena) const {
  MVStoreAppendInput* n = new MVStoreAppendInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreAppendInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreAppendInput)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreAppendInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreAppendInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreAppendInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreAppendInput)
  return false;
#undef DO_
}

void MVStoreAppendInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreAppendInput)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreAppendInput)
}

::google::protobuf::uint8* MVStoreAppendInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreAppendInput)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreAppendInput)
  return target;
}

int MVStoreAppendInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MVStoreAppendInput)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int MVStoreAppendInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreAppendInput)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreAppendInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreAppendInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreAppendInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreAppendInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreAppendInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreAppendInput)
    MergeFrom(*source);
  }
}

void MVStoreAppendInput::MergeFrom(const MVStoreAppendInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreAppendInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreAppendInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreAppendInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreAppendInput::CopyFrom(const MVStoreAppendInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreAppendInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreAppendInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MVStoreAppendInput::Swap(MVStoreAppendInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreAppendInput::InternalSwap(MVStoreAppendInput* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreAppendInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreAppendInput_descriptor_;
  metadata.reflection = MVStoreAppendInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreAppendInput

// required bytes key = 1;
bool MVStoreAppendInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreAppendInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreAppendInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreAppendInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVStoreAppendInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreAppendInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.key)
}
 void MVStoreAppendInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.key)
}
 void MVStoreAppendInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.key)
}
 ::std::string* MVStoreAppendInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreAppendInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreAppendInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.key)
}

// required bytes value = 2;
bool MVStoreAppendInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreAppendInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreAppendInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreAppendInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MVStoreAppendInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreAppendInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.value)
}
 void MVStoreAppendInput::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.value)
}
 void MVStoreAppendInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.value)
}
 ::std::string* MVStoreAppendInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreAppendInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreAppendInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreAppendOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreAppendOutput::MVStoreAppendOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreAppendOutput)
}

void MVStoreAppendOutput::InitAsDefaultInstance() {
}

MVStoreAppendOutput::MVStoreAppendOutput(const MVStoreAppendOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreAppendOutput)
}

void MVStoreAppendOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreAppendOutput::~MVStoreAppendOutput() {
  // @@protoc_insertion_point(destructor:MVStoreAppendOutput)
  SharedDtor();
}

void MVStoreAppendOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVStoreAppendOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreAppendOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreAppendOutput_descriptor_;
}

const MVStoreAppendOutput& MVStoreAppendOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreAppendOutput* MVStoreAppendOutput::default_instance_ = NULL;

MVStoreAppendOutput* MVStoreAppendOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreAppendOutput* n = new MVStoreAppendOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreAppendOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreAppendOutput)
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreAppendOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreAppendOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreAppendOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreAppendOutput)
  return false;
#undef DO_
}

void MVStoreAppendOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreAppendOutput)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreAppendOutput)
}

::google::protobuf::uint8* MVStoreAppendOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreAppendOutput)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreAppendOutput)
  return target;
}

int MVStoreAppendOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreAppendOutput)
  int total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreAppendOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreAppendOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreAppendOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreAppendOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreAppendOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreAppendOutput)
    MergeFrom(*source);
  }
}

void MVStoreAppendOutput::MergeFrom(const MVStoreAppendOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreAppendOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreAppendOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreAppendOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreAppendOutput::CopyFrom(const MVStoreAppendOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreAppendOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreAppendOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreAppendOutput::Swap(MVStoreAppendOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreAppendOutput::InternalSwap(MVStoreAppendOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreAppendOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreAppendOutput_descriptor_;
  metadata.reflection = MVStoreAppendOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreAppendOutput

// required bool success = 1;
bool MVStoreAppendOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreAppendOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreAppendOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreAppendOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool MVStoreAppendOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendOutput.success)
  return success_;
}
 void MVStoreAppendOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreAppendOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreIncrementInput::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreIncrementInput::MVStoreIncrementInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreIncrementInput)
}

void MVStoreIncrementInput::InitAsDefaultInstance() {
}

MVStoreIncrementInput::MVStoreIncrementInput(const MVStoreIncrementInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreIncrementInput)
}

void MVStoreIncrementInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreIncrementInput::~MVStoreIncrementInput() {
  // @@protoc_insertion_point(destructor:MVStoreIncrementInput)
  SharedDtor();
}

void MVStoreIncrementInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVStoreIncrementInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreIncrementInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreIncrementInput_descriptor_;
}

const MVStoreIncrementInput& MVStoreIncrementInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreIncrementInput* MVStoreIncrementInput::default_instance_ = NULL;

MVStoreIncrementInput* MVStoreIncrementInput::New(::google::protobuf::Arena* arena) const {
  MVStoreIncrementInput* n = new MVStoreIncrementInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreIncrementInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreIncrementInput)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreIncrementInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreIncrementInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreIncrementInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreIncrementInput)
  return false;
#undef DO_
}

void MVStoreIncrementInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreIncrementInput)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreIncrementInput)
}

::google::protobuf::uint8* MVStoreIncrementInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreIncrementInput)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreIncrementInput)
  return target;
}

int MVStoreIncrementInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreIncrementInput)
  int total_size = 0;

  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreIncrementInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreIncrementInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreIncrementInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreIncrementInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreIncrementInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreIncrementInput)
    MergeFrom(*source);
  }
}

void MVStoreIncrementInput::MergeFrom(const MVStoreIncrementInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreIncrementInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreIncrementInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreIncrementInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreIncrementInput::CopyFrom(const MVStoreIncrementInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreIncrementInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreIncrementInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreIncrementInput::Swap(MVStoreIncrementInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreIncrementInput::InternalSwap(MVStoreIncrementInput* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreIncrementInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreIncrementInput_descriptor_;
  metadata.reflection = MVStoreIncrementInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreIncrementInput

// required bytes key = 1;
bool MVStoreIncrementInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreIncrementInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreIncrementInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreIncrementInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVStoreIncrementInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementInput.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreIncrementInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreIncrementInput.key)
}
 void MVStoreIncrementInput::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreIncrementInput.key)
}
 void MVStoreIncrementInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreIncrementInput.key)
}
 ::std::string* MVStoreIncrementInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreIncrementInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVStoreIncrementInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreIncrementInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVStoreIncrementInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreIncrementInput.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreIncrementOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreIncrementOutput::MVStoreIncrementOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreIncrementOutput)
}

void MVStoreIncrementOutput::InitAsDefaultInstance() {
}

MVStoreIncrementOutput::MVStoreIncrementOutput(const MVStoreIncrementOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreIncrementOutput)
}

void MVStoreIncrementOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreIncrementOutput::~MVStoreIncrementOutput() {
  // @@protoc_insertion_point(destructor:MVStoreIncrementOutput)
  SharedDtor();
}

void MVStoreIncrementOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVStoreIncrementOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreIncrementOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreIncrementOutput_descriptor_;
}

const MVStoreIncrementOutput& MVStoreIncrementOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreIncrementOutput* MVStoreIncrementOutput::default_instance_ = NULL;

MVStoreIncrementOutput* MVStoreIncrementOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreIncrementOutput* n = new MVStoreIncrementOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreIncrementOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreIncrementOutput)
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreIncrementOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreIncrementOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreIncrementOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreIncrementOutput)
  return false;
#undef DO_
}

void MVStoreIncrementOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreIncrementOutput)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreIncrementOutput)
}

::google::protobuf::uint8* MVStoreIncrementOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreIncrementOutput)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreIncrementOutput)
  return target;
}

int MVStoreIncrementOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreIncrementOutput)
  int total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreIncrementOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreIncrementOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreIncrementOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreIncrementOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreIncrementOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreIncrementOutput)
    MergeFrom(*source);
  }
}

void MVStoreIncrementOutput::MergeFrom(const MVStoreIncrementOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreIncrementOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreIncrementOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreIncrementOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreIncrementOutput::CopyFrom(const MVStoreIncrementOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreIncrementOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreIncrementOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreIncrementOutput::Swap(MVStoreIncrementOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreIncrementOutput::InternalSwap(MVStoreIncrementOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreIncrementOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreIncrementOutput_descriptor_;
  metadata.reflection = MVStoreIncrementOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreIncrementOutput

// required bool success = 1;
bool MVStoreIncrementOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreIncrementOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreIncrementOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreIncrementOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool MVStoreIncrementOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementOutput.success)
  return success_;
}
 void MVStoreIncrementOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreIncrementOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreMicroInput::kKeysFieldNumber;
const int MVStoreMicroInput::kWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreMicroInput::MVStoreMicroInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreMicroInput)
}

void MVStoreMicroInput::InitAsDefaultInstance() {
}

MVStoreMicroInput::MVStoreMicroInput(const MVStoreMicroInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreMicroInput)
}

void MVStoreMicroInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  writes_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreMicroInput::~MVStoreMicroInput() {
  // @@protoc_insertion_point(destructor:MVStoreMicroInput)
  SharedDtor();
}

void MVStoreMicroInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVStoreMicroInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreMicroInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreMicroInput_descriptor_;
}

const MVStoreMicroInput& MVStoreMicroInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreMicroInput* MVStoreMicroInput::default_instance_ = NULL;

MVStoreMicroInput* MVStoreMicroInput::New(::google::protobuf::Arena* arena) const {
  MVStoreMicroInput* n = new MVStoreMicroInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreMicroInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreMicroInput)
  writes_ = 10;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreMicroInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreMicroInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_writes;
        break;
      }

      // optional int32 writes = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writes_)));
          set_has_writes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreMicroInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreMicroInput)
  return false;
#undef DO_
}

void MVStoreMicroInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreMicroInput)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // optional int32 writes = 2 [default = 10];
  if (has_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->writes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreMicroInput)
}

::google::protobuf::uint8* MVStoreMicroInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreMicroInput)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // optional int32 writes = 2 [default = 10];
  if (has_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->writes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreMicroInput)
  return target;
}

int MVStoreMicroInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreMicroInput)
  int total_size = 0;

  // optional int32 writes = 2 [default = 10];
  if (has_writes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->writes());
  }

  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreMicroInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreMicroInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreMicroInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreMicroInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreMicroInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreMicroInput)
    MergeFrom(*source);
  }
}

void MVStoreMicroInput::MergeFrom(const MVStoreMicroInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreMicroInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_writes()) {
      set_writes(from.writes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreMicroInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreMicroInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreMicroInput::CopyFrom(const MVStoreMicroInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreMicroInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreMicroInput::IsInitialized() const {

  return true;
}

void MVStoreMicroInput::Swap(MVStoreMicroInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreMicroInput::InternalSwap(MVStoreMicroInput* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(writes_, other->writes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreMicroInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreMicroInput_descriptor_;
  metadata.reflection = MVStoreMicroInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreMicroInput

// repeated bytes keys = 1;
int MVStoreMicroInput::keys_size() const {
  return keys_.size();
}
void MVStoreMicroInput::clear_keys() {
  keys_.Clear();
}
 const ::std::string& MVStoreMicroInput::keys(int index) const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.keys)
  return keys_.Get(index);
}
 ::std::string* MVStoreMicroInput::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:MVStoreMicroInput.keys)
  return keys_.Mutable(index);
}
 void MVStoreMicroInput::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.keys)
  keys_.Mutable(index)->assign(value);
}
 void MVStoreMicroInput::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MVStoreMicroInput.keys)
}
 void MVStoreMicroInput::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MVStoreMicroInput.keys)
}
 ::std::string* MVStoreMicroInput::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:MVStoreMicroInput.keys)
  return keys_.Add();
}
 void MVStoreMicroInput::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MVStoreMicroInput.keys)
}
 void MVStoreMicroInput::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MVStoreMicroInput.keys)
}
 void MVStoreMicroInput::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MVStoreMicroInput.keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MVStoreMicroInput::keys() const {
  // @@protoc_insertion_point(field_list:MVStoreMicroInput.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MVStoreMicroInput::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:MVStoreMicroInput.keys)
  return &keys_;
}

// optional int32 writes = 2 [default = 10];
bool MVStoreMicroInput::has_writes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreMicroInput::set_has_writes() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreMicroInput::clear_has_writes() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreMicroInput::clear_writes() {
  writes_ = 10;
  clear_has_writes();
}
 ::google::protobuf::int32 MVStoreMicroInput::writes() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.writes)
  return writes_;
}
 void MVStoreMicroInput::set_writes(::google::protobuf::int32 value) {
  set_has_writes();
  writes_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.writes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreMicroOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreMicroOutput::MVStoreMicroOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreMicroOutput)
}

void MVStoreMicroOutput::InitAsDefaultInstance() {
}

MVStoreMicroOutput::MVStoreMicroOutput(const MVStoreMicroOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVStoreMicroOutput)
}

void MVStoreMicroOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVStoreMicroOutput::~MVStoreMicroOutput() {
  // @@protoc_insertion_point(destructor:MVStoreMicroOutput)
  SharedDtor();
}

void MVStoreMicroOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVStoreMicroOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreMicroOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVStoreMicroOutput_descriptor_;
}

const MVStoreMicroOutput& MVStoreMicroOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mvstore_2eproto();
  return *default_instance_;
}

MVStoreMicroOutput* MVStoreMicroOutput::default_instance_ = NULL;

MVStoreMicroOutput* MVStoreMicroOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreMicroOutput* n = new MVStoreMicroOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreMicroOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreMicroOutput)
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVStoreMicroOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreMicroOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreMicroOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreMicroOutput)
  return false;
#undef DO_
}

void MVStoreMicroOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreMicroOutput)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreMicroOutput)
}

::google::protobuf::uint8* MVStoreMicroOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreMicroOutput)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreMicroOutput)
  return target;
}

int MVStoreMicroOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreMicroOutput)
  int total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreMicroOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreMicroOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVStoreMicroOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreMicroOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreMicroOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreMicroOutput)
    MergeFrom(*source);
  }
}

void MVStoreMicroOutput::MergeFrom(const MVStoreMicroOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreMicroOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVStoreMicroOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreMicroOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreMicroOutput::CopyFrom(const MVStoreMicroOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreMicroOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreMicroOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MVStoreMicroOutput::Swap(MVStoreMicroOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreMicroOutput::InternalSwap(MVStoreMicroOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreMicroOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVStoreMicroOutput_descriptor_;
  metadata.reflection = MVStoreMicroOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreMicroOutput

// required bool success = 1;
bool MVStoreMicroOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreMicroOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreMicroOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreMicroOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool MVStoreMicroOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroOutput.success)
  return success_;
}
 void MVStoreMicroOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
