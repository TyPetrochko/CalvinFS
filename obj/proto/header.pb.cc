// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Priority_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_header_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_header_2eproto() {
  protobuf_AddDesc_header_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "header.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, callback_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, callback_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, ack_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, data_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, data_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, misc_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, misc_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, misc_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, misc_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, misc_scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, external_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, external_port_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      -1);
  Header_Type_descriptor_ = Header_descriptor_->enum_type(0);
  Header_Priority_descriptor_ = Header_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_header_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_header_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
}

void protobuf_AddDesc_header_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_header_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_scalar_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014header.proto\032\014scalar.proto\"\343\003\n\006Header\022"
    "\014\n\004from\030\001 \002(\004\022\n\n\002to\030\002 \002(\004\022\032\n\004type\030\003 \002(\0162"
    "\014.Header.Type\022\013\n\003app\030\013 \001(\t\022\013\n\003rpc\030\014 \001(\t\022"
    "(\n\010priority\030\r \001(\0162\020.Header.Priority:\004HIG"
    "H\022\024\n\014callback_app\030\025 \001(\t\022\024\n\014callback_rpc\030"
    "\026 \001(\t\022\023\n\013ack_counter\030\027 \001(\004\022\020\n\010data_ptr\030\037"
    " \001(\004\022\024\n\014data_channel\030  \001(\t\022\021\n\tmisc_bool\030"
    ") \003(\010\022\020\n\010misc_int\030* \003(\004\022\023\n\013misc_string\030+"
    " \003(\014\022\023\n\013misc_double\030, \003(\001\022\034\n\013misc_scalar"
    "\030- \003(\0132\007.Scalar\022\025\n\rexternal_host\0303 \001(\t\022\025"
    "\n\rexternal_port\0304 \001(\005\"<\n\004Type\022\007\n\003RPC\020\001\022\014"
    "\n\010CALLBACK\020\002\022\007\n\003ACK\020\003\022\010\n\004DATA\020\004\022\n\n\006SYSTE"
    "M\020\005\"\035\n\010Priority\022\007\n\003LOW\020\000\022\010\n\004HIGH\020\001", 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "header.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_header_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_header_2eproto {
  StaticDescriptorInitializer_header_2eproto() {
    protobuf_AddDesc_header_2eproto();
  }
} static_descriptor_initializer_header_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Header_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Type_descriptor_;
}
bool Header_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_Type Header::RPC;
const Header_Type Header::CALLBACK;
const Header_Type Header::ACK;
const Header_Type Header::DATA;
const Header_Type Header::SYSTEM;
const Header_Type Header::Type_MIN;
const Header_Type Header::Type_MAX;
const int Header::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_Priority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Priority_descriptor_;
}
bool Header_Priority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_Priority Header::LOW;
const Header_Priority Header::HIGH;
const Header_Priority Header::Priority_MIN;
const Header_Priority Header::Priority_MAX;
const int Header::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kFromFieldNumber;
const int Header::kToFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kAppFieldNumber;
const int Header::kRpcFieldNumber;
const int Header::kPriorityFieldNumber;
const int Header::kCallbackAppFieldNumber;
const int Header::kCallbackRpcFieldNumber;
const int Header::kAckCounterFieldNumber;
const int Header::kDataPtrFieldNumber;
const int Header::kDataChannelFieldNumber;
const int Header::kMiscBoolFieldNumber;
const int Header::kMiscIntFieldNumber;
const int Header::kMiscStringFieldNumber;
const int Header::kMiscDoubleFieldNumber;
const int Header::kMiscScalarFieldNumber;
const int Header::kExternalHostFieldNumber;
const int Header::kExternalPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_ = GOOGLE_ULONGLONG(0);
  to_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 1;
  callback_app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_counter_ = GOOGLE_ULONGLONG(0);
  data_ptr_ = GOOGLE_ULONGLONG(0);
  data_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_rpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(from_, to_);
    type_ = 1;
    if (has_app()) {
      app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rpc()) {
      rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    priority_ = 1;
    if (has_callback_app()) {
      callback_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_callback_rpc()) {
      callback_rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(ack_counter_, data_ptr_);
    if (has_data_channel()) {
      data_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_external_host()) {
      external_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    external_port_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  misc_bool_.Clear();
  misc_int_.Clear();
  misc_string_.Clear();
  misc_double_.Clear();
  misc_scalar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // required uint64 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Header.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Type_IsValid(value)) {
            set_type(static_cast< ::Header_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_app;
        break;
      }

      // optional string app = 11;
      case 11: {
        if (tag == 90) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app().data(), this->app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.app");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rpc;
        break;
      }

      // optional string rpc = 12;
      case 12: {
        if (tag == 98) {
         parse_rpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rpc().data(), this->rpc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.rpc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_priority;
        break;
      }

      // optional .Header.Priority priority = 13 [default = HIGH];
      case 13: {
        if (tag == 104) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Priority_IsValid(value)) {
            set_priority(static_cast< ::Header_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_callback_app;
        break;
      }

      // optional string callback_app = 21;
      case 21: {
        if (tag == 170) {
         parse_callback_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callback_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callback_app().data(), this->callback_app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.callback_app");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_callback_rpc;
        break;
      }

      // optional string callback_rpc = 22;
      case 22: {
        if (tag == 178) {
         parse_callback_rpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callback_rpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callback_rpc().data(), this->callback_rpc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.callback_rpc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ack_counter;
        break;
      }

      // optional uint64 ack_counter = 23;
      case 23: {
        if (tag == 184) {
         parse_ack_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ack_counter_)));
          set_has_ack_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_data_ptr;
        break;
      }

      // optional uint64 data_ptr = 31;
      case 31: {
        if (tag == 248) {
         parse_data_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_ptr_)));
          set_has_data_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_data_channel;
        break;
      }

      // optional string data_channel = 32;
      case 32: {
        if (tag == 258) {
         parse_data_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_channel().data(), this->data_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.data_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_misc_bool;
        break;
      }

      // repeated bool misc_bool = 41;
      case 41: {
        if (tag == 328) {
         parse_misc_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 328, input, this->mutable_misc_bool())));
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_misc_bool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_misc_bool;
        if (input->ExpectTag(336)) goto parse_misc_int;
        break;
      }

      // repeated uint64 misc_int = 42;
      case 42: {
        if (tag == 336) {
         parse_misc_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 336, input, this->mutable_misc_int())));
        } else if (tag == 338) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_misc_int())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_misc_int;
        if (input->ExpectTag(346)) goto parse_misc_string;
        break;
      }

      // repeated bytes misc_string = 43;
      case 43: {
        if (tag == 346) {
         parse_misc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_misc_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_misc_string;
        if (input->ExpectTag(353)) goto parse_misc_double;
        break;
      }

      // repeated double misc_double = 44;
      case 44: {
        if (tag == 353) {
         parse_misc_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 353, input, this->mutable_misc_double())));
        } else if (tag == 354) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_misc_double())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_misc_double;
        if (input->ExpectTag(362)) goto parse_misc_scalar;
        break;
      }

      // repeated .Scalar misc_scalar = 45;
      case 45: {
        if (tag == 362) {
         parse_misc_scalar:
          DO_(input->IncrementRecursionDepth());
         parse_loop_misc_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_misc_scalar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_loop_misc_scalar;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(410)) goto parse_external_host;
        break;
      }

      // optional string external_host = 51;
      case 51: {
        if (tag == 410) {
         parse_external_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_host().data(), this->external_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.external_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_external_port;
        break;
      }

      // optional int32 external_port = 52;
      case 52: {
        if (tag == 416) {
         parse_external_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_port_)));
          set_has_external_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  // required uint64 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from(), output);
  }

  // required uint64 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
  }

  // required .Header.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string app = 11;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->app(), output);
  }

  // optional string rpc = 12;
  if (has_rpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rpc().data(), this->rpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.rpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rpc(), output);
  }

  // optional .Header.Priority priority = 13 [default = HIGH];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->priority(), output);
  }

  // optional string callback_app = 21;
  if (has_callback_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_app().data(), this->callback_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->callback_app(), output);
  }

  // optional string callback_rpc = 22;
  if (has_callback_rpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_rpc().data(), this->callback_rpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_rpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->callback_rpc(), output);
  }

  // optional uint64 ack_counter = 23;
  if (has_ack_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->ack_counter(), output);
  }

  // optional uint64 data_ptr = 31;
  if (has_data_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->data_ptr(), output);
  }

  // optional string data_channel = 32;
  if (has_data_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_channel().data(), this->data_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.data_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->data_channel(), output);
  }

  // repeated bool misc_bool = 41;
  for (int i = 0; i < this->misc_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      41, this->misc_bool(i), output);
  }

  // repeated uint64 misc_int = 42;
  for (int i = 0; i < this->misc_int_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      42, this->misc_int(i), output);
  }

  // repeated bytes misc_string = 43;
  for (int i = 0; i < this->misc_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      43, this->misc_string(i), output);
  }

  // repeated double misc_double = 44;
  for (int i = 0; i < this->misc_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      44, this->misc_double(i), output);
  }

  // repeated .Scalar misc_scalar = 45;
  for (unsigned int i = 0, n = this->misc_scalar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->misc_scalar(i), output);
  }

  // optional string external_host = 51;
  if (has_external_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_host().data(), this->external_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.external_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->external_host(), output);
  }

  // optional int32 external_port = 52;
  if (has_external_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->external_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  // required uint64 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from(), target);
  }

  // required uint64 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
  }

  // required .Header.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string app = 11;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->app(), target);
  }

  // optional string rpc = 12;
  if (has_rpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rpc().data(), this->rpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.rpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rpc(), target);
  }

  // optional .Header.Priority priority = 13 [default = HIGH];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->priority(), target);
  }

  // optional string callback_app = 21;
  if (has_callback_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_app().data(), this->callback_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->callback_app(), target);
  }

  // optional string callback_rpc = 22;
  if (has_callback_rpc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_rpc().data(), this->callback_rpc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_rpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->callback_rpc(), target);
  }

  // optional uint64 ack_counter = 23;
  if (has_ack_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->ack_counter(), target);
  }

  // optional uint64 data_ptr = 31;
  if (has_data_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->data_ptr(), target);
  }

  // optional string data_channel = 32;
  if (has_data_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_channel().data(), this->data_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.data_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->data_channel(), target);
  }

  // repeated bool misc_bool = 41;
  for (int i = 0; i < this->misc_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(41, this->misc_bool(i), target);
  }

  // repeated uint64 misc_int = 42;
  for (int i = 0; i < this->misc_int_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(42, this->misc_int(i), target);
  }

  // repeated bytes misc_string = 43;
  for (int i = 0; i < this->misc_string_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(43, this->misc_string(i), target);
  }

  // repeated double misc_double = 44;
  for (int i = 0; i < this->misc_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(44, this->misc_double(i), target);
  }

  // repeated .Scalar misc_scalar = 45;
  for (unsigned int i = 0, n = this->misc_scalar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, this->misc_scalar(i), false, target);
  }

  // optional string external_host = 51;
  if (has_external_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_host().data(), this->external_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.external_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->external_host(), target);
  }

  // optional int32 external_port = 52;
  if (has_external_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->external_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

int Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Header)
  int total_size = 0;

  if (has_from()) {
    // required uint64 from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->from());
  }

  if (has_to()) {
    // required uint64 to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->to());
  }

  if (has_type()) {
    // required .Header.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->from());

    // required uint64 to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->to());

    // required .Header.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional string app = 11;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app());
    }

    // optional string rpc = 12;
    if (has_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rpc());
    }

    // optional .Header.Priority priority = 13 [default = HIGH];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional string callback_app = 21;
    if (has_callback_app()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callback_app());
    }

    // optional string callback_rpc = 22;
    if (has_callback_rpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callback_rpc());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 ack_counter = 23;
    if (has_ack_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ack_counter());
    }

    // optional uint64 data_ptr = 31;
    if (has_data_ptr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_ptr());
    }

    // optional string data_channel = 32;
    if (has_data_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_channel());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string external_host = 51;
    if (has_external_host()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_host());
    }

    // optional int32 external_port = 52;
    if (has_external_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_port());
    }

  }
  // repeated bool misc_bool = 41;
  {
    int data_size = 0;
    data_size = 1 * this->misc_bool_size();
    total_size += 2 * this->misc_bool_size() + data_size;
  }

  // repeated uint64 misc_int = 42;
  {
    int data_size = 0;
    for (int i = 0; i < this->misc_int_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->misc_int(i));
    }
    total_size += 2 * this->misc_int_size() + data_size;
  }

  // repeated bytes misc_string = 43;
  total_size += 2 * this->misc_string_size();
  for (int i = 0; i < this->misc_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->misc_string(i));
  }

  // repeated double misc_double = 44;
  {
    int data_size = 0;
    data_size = 8 * this->misc_double_size();
    total_size += 2 * this->misc_double_size() + data_size;
  }

  // repeated .Scalar misc_scalar = 45;
  total_size += 2 * this->misc_scalar_size();
  for (int i = 0; i < this->misc_scalar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->misc_scalar(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  misc_bool_.MergeFrom(from.misc_bool_);
  misc_int_.MergeFrom(from.misc_int_);
  misc_string_.MergeFrom(from.misc_string_);
  misc_double_.MergeFrom(from.misc_double_);
  misc_scalar_.MergeFrom(from.misc_scalar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_app()) {
      set_has_app();
      app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
    }
    if (from.has_rpc()) {
      set_has_rpc();
      rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_);
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_callback_app()) {
      set_has_callback_app();
      callback_app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_app_);
    }
    if (from.has_callback_rpc()) {
      set_has_callback_rpc();
      callback_rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_rpc_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ack_counter()) {
      set_ack_counter(from.ack_counter());
    }
    if (from.has_data_ptr()) {
      set_data_ptr(from.data_ptr());
    }
    if (from.has_data_channel()) {
      set_has_data_channel();
      data_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_channel_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_external_host()) {
      set_has_external_host();
      external_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_host_);
    }
    if (from.has_external_port()) {
      set_external_port(from.external_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->misc_scalar())) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(type_, other->type_);
  app_.Swap(&other->app_);
  rpc_.Swap(&other->rpc_);
  std::swap(priority_, other->priority_);
  callback_app_.Swap(&other->callback_app_);
  callback_rpc_.Swap(&other->callback_rpc_);
  std::swap(ack_counter_, other->ack_counter_);
  std::swap(data_ptr_, other->data_ptr_);
  data_channel_.Swap(&other->data_channel_);
  misc_bool_.UnsafeArenaSwap(&other->misc_bool_);
  misc_int_.UnsafeArenaSwap(&other->misc_int_);
  misc_string_.UnsafeArenaSwap(&other->misc_string_);
  misc_double_.UnsafeArenaSwap(&other->misc_double_);
  misc_scalar_.UnsafeArenaSwap(&other->misc_scalar_);
  external_host_.Swap(&other->external_host_);
  std::swap(external_port_, other->external_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required uint64 from = 1;
bool Header::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
  clear_has_from();
}
 ::google::protobuf::uint64 Header::from() const {
  // @@protoc_insertion_point(field_get:Header.from)
  return from_;
}
 void Header::set_from(::google::protobuf::uint64 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:Header.from)
}

// required uint64 to = 2;
bool Header::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
 ::google::protobuf::uint64 Header::to() const {
  // @@protoc_insertion_point(field_get:Header.to)
  return to_;
}
 void Header::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:Header.to)
}

// required .Header.Type type = 3;
bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::Header_Type Header::type() const {
  // @@protoc_insertion_point(field_get:Header.type)
  return static_cast< ::Header_Type >(type_);
}
 void Header::set_type(::Header_Type value) {
  assert(::Header_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Header.type)
}

// optional string app = 11;
bool Header::has_app() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_app() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_app() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
 const ::std::string& Header::app() const {
  // @@protoc_insertion_point(field_get:Header.app)
  return app_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.app)
}
 void Header::set_app(const char* value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.app)
}
 void Header::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.app)
}
 ::std::string* Header::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:Header.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_app() {
  // @@protoc_insertion_point(field_release:Header.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:Header.app)
}

// optional string rpc = 12;
bool Header::has_rpc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_rpc() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_rpc() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_rpc() {
  rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rpc();
}
 const ::std::string& Header::rpc() const {
  // @@protoc_insertion_point(field_get:Header.rpc)
  return rpc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_rpc(const ::std::string& value) {
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.rpc)
}
 void Header::set_rpc(const char* value) {
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.rpc)
}
 void Header::set_rpc(const char* value, size_t size) {
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.rpc)
}
 ::std::string* Header::mutable_rpc() {
  set_has_rpc();
  // @@protoc_insertion_point(field_mutable:Header.rpc)
  return rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_rpc() {
  // @@protoc_insertion_point(field_release:Header.rpc)
  clear_has_rpc();
  return rpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_rpc(::std::string* rpc) {
  if (rpc != NULL) {
    set_has_rpc();
  } else {
    clear_has_rpc();
  }
  rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.rpc)
}

// optional .Header.Priority priority = 13 [default = HIGH];
bool Header::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_priority() {
  priority_ = 1;
  clear_has_priority();
}
 ::Header_Priority Header::priority() const {
  // @@protoc_insertion_point(field_get:Header.priority)
  return static_cast< ::Header_Priority >(priority_);
}
 void Header::set_priority(::Header_Priority value) {
  assert(::Header_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:Header.priority)
}

// optional string callback_app = 21;
bool Header::has_callback_app() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Header::set_has_callback_app() {
  _has_bits_[0] |= 0x00000040u;
}
void Header::clear_has_callback_app() {
  _has_bits_[0] &= ~0x00000040u;
}
void Header::clear_callback_app() {
  callback_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_app();
}
 const ::std::string& Header::callback_app() const {
  // @@protoc_insertion_point(field_get:Header.callback_app)
  return callback_app_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_callback_app(const ::std::string& value) {
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_app)
}
 void Header::set_callback_app(const char* value) {
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_app)
}
 void Header::set_callback_app(const char* value, size_t size) {
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_app)
}
 ::std::string* Header::mutable_callback_app() {
  set_has_callback_app();
  // @@protoc_insertion_point(field_mutable:Header.callback_app)
  return callback_app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_callback_app() {
  // @@protoc_insertion_point(field_release:Header.callback_app)
  clear_has_callback_app();
  return callback_app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_callback_app(::std::string* callback_app) {
  if (callback_app != NULL) {
    set_has_callback_app();
  } else {
    clear_has_callback_app();
  }
  callback_app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_app);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_app)
}

// optional string callback_rpc = 22;
bool Header::has_callback_rpc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Header::set_has_callback_rpc() {
  _has_bits_[0] |= 0x00000080u;
}
void Header::clear_has_callback_rpc() {
  _has_bits_[0] &= ~0x00000080u;
}
void Header::clear_callback_rpc() {
  callback_rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_rpc();
}
 const ::std::string& Header::callback_rpc() const {
  // @@protoc_insertion_point(field_get:Header.callback_rpc)
  return callback_rpc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_callback_rpc(const ::std::string& value) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_rpc)
}
 void Header::set_callback_rpc(const char* value) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_rpc)
}
 void Header::set_callback_rpc(const char* value, size_t size) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_rpc)
}
 ::std::string* Header::mutable_callback_rpc() {
  set_has_callback_rpc();
  // @@protoc_insertion_point(field_mutable:Header.callback_rpc)
  return callback_rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_callback_rpc() {
  // @@protoc_insertion_point(field_release:Header.callback_rpc)
  clear_has_callback_rpc();
  return callback_rpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_callback_rpc(::std::string* callback_rpc) {
  if (callback_rpc != NULL) {
    set_has_callback_rpc();
  } else {
    clear_has_callback_rpc();
  }
  callback_rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_rpc)
}

// optional uint64 ack_counter = 23;
bool Header::has_ack_counter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Header::set_has_ack_counter() {
  _has_bits_[0] |= 0x00000100u;
}
void Header::clear_has_ack_counter() {
  _has_bits_[0] &= ~0x00000100u;
}
void Header::clear_ack_counter() {
  ack_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_ack_counter();
}
 ::google::protobuf::uint64 Header::ack_counter() const {
  // @@protoc_insertion_point(field_get:Header.ack_counter)
  return ack_counter_;
}
 void Header::set_ack_counter(::google::protobuf::uint64 value) {
  set_has_ack_counter();
  ack_counter_ = value;
  // @@protoc_insertion_point(field_set:Header.ack_counter)
}

// optional uint64 data_ptr = 31;
bool Header::has_data_ptr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Header::set_has_data_ptr() {
  _has_bits_[0] |= 0x00000200u;
}
void Header::clear_has_data_ptr() {
  _has_bits_[0] &= ~0x00000200u;
}
void Header::clear_data_ptr() {
  data_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_data_ptr();
}
 ::google::protobuf::uint64 Header::data_ptr() const {
  // @@protoc_insertion_point(field_get:Header.data_ptr)
  return data_ptr_;
}
 void Header::set_data_ptr(::google::protobuf::uint64 value) {
  set_has_data_ptr();
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:Header.data_ptr)
}

// optional string data_channel = 32;
bool Header::has_data_channel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Header::set_has_data_channel() {
  _has_bits_[0] |= 0x00000400u;
}
void Header::clear_has_data_channel() {
  _has_bits_[0] &= ~0x00000400u;
}
void Header::clear_data_channel() {
  data_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_channel();
}
 const ::std::string& Header::data_channel() const {
  // @@protoc_insertion_point(field_get:Header.data_channel)
  return data_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_data_channel(const ::std::string& value) {
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.data_channel)
}
 void Header::set_data_channel(const char* value) {
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.data_channel)
}
 void Header::set_data_channel(const char* value, size_t size) {
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.data_channel)
}
 ::std::string* Header::mutable_data_channel() {
  set_has_data_channel();
  // @@protoc_insertion_point(field_mutable:Header.data_channel)
  return data_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_data_channel() {
  // @@protoc_insertion_point(field_release:Header.data_channel)
  clear_has_data_channel();
  return data_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_data_channel(::std::string* data_channel) {
  if (data_channel != NULL) {
    set_has_data_channel();
  } else {
    clear_has_data_channel();
  }
  data_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_channel);
  // @@protoc_insertion_point(field_set_allocated:Header.data_channel)
}

// repeated bool misc_bool = 41;
int Header::misc_bool_size() const {
  return misc_bool_.size();
}
void Header::clear_misc_bool() {
  misc_bool_.Clear();
}
 bool Header::misc_bool(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_bool)
  return misc_bool_.Get(index);
}
 void Header::set_misc_bool(int index, bool value) {
  misc_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_bool)
}
 void Header::add_misc_bool(bool value) {
  misc_bool_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_bool)
}
 const ::google::protobuf::RepeatedField< bool >&
Header::misc_bool() const {
  // @@protoc_insertion_point(field_list:Header.misc_bool)
  return misc_bool_;
}
 ::google::protobuf::RepeatedField< bool >*
Header::mutable_misc_bool() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_bool)
  return &misc_bool_;
}

// repeated uint64 misc_int = 42;
int Header::misc_int_size() const {
  return misc_int_.size();
}
void Header::clear_misc_int() {
  misc_int_.Clear();
}
 ::google::protobuf::uint64 Header::misc_int(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_int)
  return misc_int_.Get(index);
}
 void Header::set_misc_int(int index, ::google::protobuf::uint64 value) {
  misc_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_int)
}
 void Header::add_misc_int(::google::protobuf::uint64 value) {
  misc_int_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_int)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Header::misc_int() const {
  // @@protoc_insertion_point(field_list:Header.misc_int)
  return misc_int_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Header::mutable_misc_int() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_int)
  return &misc_int_;
}

// repeated bytes misc_string = 43;
int Header::misc_string_size() const {
  return misc_string_.size();
}
void Header::clear_misc_string() {
  misc_string_.Clear();
}
 const ::std::string& Header::misc_string(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_string)
  return misc_string_.Get(index);
}
 ::std::string* Header::mutable_misc_string(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_string)
  return misc_string_.Mutable(index);
}
 void Header::set_misc_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.misc_string)
  misc_string_.Mutable(index)->assign(value);
}
 void Header::set_misc_string(int index, const char* value) {
  misc_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.misc_string)
}
 void Header::set_misc_string(int index, const void* value, size_t size) {
  misc_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.misc_string)
}
 ::std::string* Header::add_misc_string() {
  // @@protoc_insertion_point(field_add_mutable:Header.misc_string)
  return misc_string_.Add();
}
 void Header::add_misc_string(const ::std::string& value) {
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.misc_string)
}
 void Header::add_misc_string(const char* value) {
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.misc_string)
}
 void Header::add_misc_string(const void* value, size_t size) {
  misc_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.misc_string)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Header::misc_string() const {
  // @@protoc_insertion_point(field_list:Header.misc_string)
  return misc_string_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Header::mutable_misc_string() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_string)
  return &misc_string_;
}

// repeated double misc_double = 44;
int Header::misc_double_size() const {
  return misc_double_.size();
}
void Header::clear_misc_double() {
  misc_double_.Clear();
}
 double Header::misc_double(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_double)
  return misc_double_.Get(index);
}
 void Header::set_misc_double(int index, double value) {
  misc_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_double)
}
 void Header::add_misc_double(double value) {
  misc_double_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_double)
}
 const ::google::protobuf::RepeatedField< double >&
Header::misc_double() const {
  // @@protoc_insertion_point(field_list:Header.misc_double)
  return misc_double_;
}
 ::google::protobuf::RepeatedField< double >*
Header::mutable_misc_double() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_double)
  return &misc_double_;
}

// repeated .Scalar misc_scalar = 45;
int Header::misc_scalar_size() const {
  return misc_scalar_.size();
}
void Header::clear_misc_scalar() {
  misc_scalar_.Clear();
}
const ::Scalar& Header::misc_scalar(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_scalar)
  return misc_scalar_.Get(index);
}
::Scalar* Header::mutable_misc_scalar(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_scalar)
  return misc_scalar_.Mutable(index);
}
::Scalar* Header::add_misc_scalar() {
  // @@protoc_insertion_point(field_add:Header.misc_scalar)
  return misc_scalar_.Add();
}
::google::protobuf::RepeatedPtrField< ::Scalar >*
Header::mutable_misc_scalar() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_scalar)
  return &misc_scalar_;
}
const ::google::protobuf::RepeatedPtrField< ::Scalar >&
Header::misc_scalar() const {
  // @@protoc_insertion_point(field_list:Header.misc_scalar)
  return misc_scalar_;
}

// optional string external_host = 51;
bool Header::has_external_host() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Header::set_has_external_host() {
  _has_bits_[0] |= 0x00010000u;
}
void Header::clear_has_external_host() {
  _has_bits_[0] &= ~0x00010000u;
}
void Header::clear_external_host() {
  external_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_host();
}
 const ::std::string& Header::external_host() const {
  // @@protoc_insertion_point(field_get:Header.external_host)
  return external_host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_external_host(const ::std::string& value) {
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.external_host)
}
 void Header::set_external_host(const char* value) {
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.external_host)
}
 void Header::set_external_host(const char* value, size_t size) {
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.external_host)
}
 ::std::string* Header::mutable_external_host() {
  set_has_external_host();
  // @@protoc_insertion_point(field_mutable:Header.external_host)
  return external_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_external_host() {
  // @@protoc_insertion_point(field_release:Header.external_host)
  clear_has_external_host();
  return external_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_external_host(::std::string* external_host) {
  if (external_host != NULL) {
    set_has_external_host();
  } else {
    clear_has_external_host();
  }
  external_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_host);
  // @@protoc_insertion_point(field_set_allocated:Header.external_host)
}

// optional int32 external_port = 52;
bool Header::has_external_port() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Header::set_has_external_port() {
  _has_bits_[0] |= 0x00020000u;
}
void Header::clear_has_external_port() {
  _has_bits_[0] &= ~0x00020000u;
}
void Header::clear_external_port() {
  external_port_ = 0;
  clear_has_external_port();
}
 ::google::protobuf::int32 Header::external_port() const {
  // @@protoc_insertion_point(field_get:Header.external_port)
  return external_port_;
}
 void Header::set_external_port(::google::protobuf::int32 value) {
  set_has_external_port();
  external_port_ = value;
  // @@protoc_insertion_point(field_set:Header.external_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
